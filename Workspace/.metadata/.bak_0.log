!SESSION 2012-10-05 16:49:38.656 -----------------------------------------------
eclipse.buildId=M20120208-0800
java.version=1.7.0_05
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -data C:\SourceControl\QRef\trunk\Workspace -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\SourceControl\QRef\trunk\Workspace\.metadata\.bak_0.log
Created Time: 2012-10-08 14:20:20.308

!ENTRY org.apache.log4j 4 0 2012-10-08 14:20:20.309
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		manufacturerId = req.body.manufacturer
		modelId = req.body.model
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
				.where('_id')
				.equals(modelId)
				.where('manufacturer')
				.equals(mfr._id)
				.exec((err, mdl) -> 
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not mdl?
						resp = new RpcResponse(null)
						resp.failure('Model Not Found', 404)
						res.json(resp, 200)
						return
						
					db.AircraftChecklist.findOne()
						.where('model')
						.equals(mdl._id)
						.where('manufacturer')
						.equals(mfr._id)
						.where('user')
						.equals(null)
						.sort('-version')
						.exec((err, record) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not record?
								resp = new RpcResponse(1)
								res.json(resp, 200)
								return
							
							resp = new RpcResponse(record.version + 1)
							res.json(resp)
						)
				)
		)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 2539, length: 0, timestamp: 1035
text:>p<



!ENTRY org.apache.log4j 4 0 2012-10-08 14:20:20.611
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		manufacturerId = req.body.manufacturer
		modelId = req.body.model
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
				.where('_id')
				.equals(modelId)
				.where('manufacturer')
				.equals(mfr._id)
				.exec((err, mdl) -> 
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not mdl?
						resp = new RpcResponse(null)
						resp.failure('Model Not Found', 404)
						res.json(resp, 200)
						return
						
					db.AircraftChecklist.findOne()
						.where('model')
						.equals(mdl._id)
						.where('manufacturer')
						.equals(mfr._id)
						.where('user')
						.equals(null)
						.sort('-version')
						.exec((err, record) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not record?
								resp = new RpcResponse(1)
								res.json(resp, 200)
								return
							
							resp = new RpcResponse(record.version + 1)
							res.json(resp,)
						)
				)
		)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 2540, length: 0, timestamp: 1036
text:>,<



!ENTRY org.apache.log4j 4 0 2012-10-08 14:20:20.711
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		manufacturerId = req.body.manufacturer
		modelId = req.body.model
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
				.where('_id')
				.equals(modelId)
				.where('manufacturer')
				.equals(mfr._id)
				.exec((err, mdl) -> 
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not mdl?
						resp = new RpcResponse(null)
						resp.failure('Model Not Found', 404)
						res.json(resp, 200)
						return
						
					db.AircraftChecklist.findOne()
						.where('model')
						.equals(mdl._id)
						.where('manufacturer')
						.equals(mfr._id)
						.where('user')
						.equals(null)
						.sort('-version')
						.exec((err, record) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not record?
								resp = new RpcResponse(1)
								res.json(resp, 200)
								return
							
							resp = new RpcResponse(record.version + 1)
							res.json(resp, )
						)
				)
		)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 2541, length: 0, timestamp: 1037
text:> <



!ENTRY org.apache.log4j 4 0 2012-10-08 14:20:21.255
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		manufacturerId = req.body.manufacturer
		modelId = req.body.model
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
				.where('_id')
				.equals(modelId)
				.where('manufacturer')
				.equals(mfr._id)
				.exec((err, mdl) -> 
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not mdl?
						resp = new RpcResponse(null)
						resp.failure('Model Not Found', 404)
						res.json(resp, 200)
						return
						
					db.AircraftChecklist.findOne()
						.where('model')
						.equals(mdl._id)
						.where('manufacturer')
						.equals(mfr._id)
						.where('user')
						.equals(null)
						.sort('-version')
						.exec((err, record) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not record?
								resp = new RpcResponse(1)
								res.json(resp, 200)
								return
							
							resp = new RpcResponse(record.version + 1)
							res.json(resp, 2)
						)
				)
		)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 2542, length: 0, timestamp: 1038
text:>2<



!ENTRY org.apache.log4j 4 0 2012-10-08 14:20:21.480
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		manufacturerId = req.body.manufacturer
		modelId = req.body.model
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
				.where('_id')
				.equals(modelId)
				.where('manufacturer')
				.equals(mfr._id)
				.exec((err, mdl) -> 
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not mdl?
						resp = new RpcResponse(null)
						resp.failure('Model Not Found', 404)
						res.json(resp, 200)
						return
						
					db.AircraftChecklist.findOne()
						.where('model')
						.equals(mdl._id)
						.where('manufacturer')
						.equals(mfr._id)
						.where('user')
						.equals(null)
						.sort('-version')
						.exec((err, record) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not record?
								resp = new RpcResponse(1)
								res.json(resp, 200)
								return
							
							resp = new RpcResponse(record.version + 1)
							res.json(resp, 20)
						)
				)
		)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 2543, length: 0, timestamp: 1039
text:>0<



!ENTRY org.apache.log4j 4 0 2012-10-08 14:20:21.628
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		manufacturerId = req.body.manufacturer
		modelId = req.body.model
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
				.where('_id')
				.equals(modelId)
				.where('manufacturer')
				.equals(mfr._id)
				.exec((err, mdl) -> 
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not mdl?
						resp = new RpcResponse(null)
						resp.failure('Model Not Found', 404)
						res.json(resp, 200)
						return
						
					db.AircraftChecklist.findOne()
						.where('model')
						.equals(mdl._id)
						.where('manufacturer')
						.equals(mfr._id)
						.where('user')
						.equals(null)
						.sort('-version')
						.exec((err, record) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not record?
								resp = new RpcResponse(1)
								res.json(resp, 200)
								return
							
							resp = new RpcResponse(record.version + 1)
							res.json(resp, 200)
						)
				)
		)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 2544, length: 0, timestamp: 1040
text:>0<



!ENTRY org.apache.log4j 4 0 2012-10-08 14:21:06.689
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		manufacturerId = req.body.manufacturer
		modelId = req.body.model
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
					.where('_id')
					.equals(modelId)
					.where('manufacturer')
					.equals(mfr._id)
					.exec((err, mdl) -> 
						if err?
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						if not mdl?
							resp = new RpcResponse(null)
							resp.failure('Model Not Found', 404)
							res.json(resp, 200)
							return
							
						db.AircraftChecklist.findOne()
							.where('model')
							.equals(mdl._id)
							.where('manufacturer')
							.equals(mfr._id)
							.where('user')
							.equals(null)
							.sort('-version')
							.exec((err, record) ->
								if err?
									resp = new RpcResponse(null)
									resp.failure('Internal Error', 500)
									res.json(resp, 200)
									return
									
								if not record?
									resp = new RpcResponse(1)
									res.json(resp, 200)
									return
								
								resp = new RpcResponse(record.version + 1)
								res.json(resp, 200)
							)
					)
		)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 2601, length: 0, timestamp: 1081
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-08 14:21:12.000
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		manufacturerId = req.body.manufacturer
		modelId = req.body.model
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
					.where('_id')
					.equals(modelId)
					.where('manufacturer')
					.equals(mfr._id)
					.exec((err, mdl) -> 
						if err?
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						if not mdl?
							resp = new RpcResponse(null)
							resp.failure('Model Not Found', 404)
							res.json(resp, 200)
							return
							
						db.AircraftChecklist.findOne()
							.where('model')
							.equals(mdl._id)
							.where('manufacturer')
							.equals(mfr._id)
							.where('user')
							.equals(null)
							.sort('-version')
							.exec((err, record) ->
								if err?
									resp = new RpcResponse(null)
									resp.failure('Internal Error', 500)
									res.json(resp, 200)
									return
									
								if not record?
									resp = new RpcResponse(1)
									res.json(resp, 200)
									return
								
								resp = new RpcResponse(record.version + 1)
								res.json(resp, 200)
							)
					)
			)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 2607, length: 0, timestamp: 1082
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-08 14:21:37.804
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		manufacturerId = req.body.manufacturer
		modelId = req.body.model
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
				.where('_id')
				.equals(modelId)
				.where('manufacturer')
				.equals(mfr._id)
				.exec((err, mdl) -> 
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not mdl?
						resp = new RpcResponse(null)
						resp.failure('Model Not Found', 404)
						res.json(resp, 200)
						return
						
					db.AircraftChecklist.findOne()
						.where('model')
						.equals(mdl._id)
						.where('manufacturer')
						.equals(mfr._id)
						.where('user')
						.equals(null)
						.sort('-version')
						.exec((err, record) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not record?
								resp = new RpcResponse(1)
								res.json(resp, 200)
								return
							
							resp = new RpcResponse(record.version + 1)
							res.json(resp, 200)
					)
				)
		)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 2553, length: 1, timestamp: 1125
text:><


!SESSION 2012-10-10 18:34:56.172 -----------------------------------------------
eclipse.buildId=M20120208-0800
java.version=1.7.0_05
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -data C:\SourceControl\QRef\trunk\Workspace -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.apache.log4j 4 0 2012-10-10 18:37:29.611
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>AjaxRoute = require('../../../AjaxRoute')
AjaxResponse = require('../../../../serialization/AjaxResponse')
UserAuth = require('../../../../security/UserAuth')
QRefDatabase = require('../../../../db/QRefDatabase')
ProductManager = require('../../../../db/manager/ProductManager')
###
Service route that allows the retrieval and updation of an individual product.
@example Service Methods (see {UpdateAircraftProductAjaxRequest})
  Request Format: application/json
  Response Format: application/json
  
  GET /services/ajax/aircraft/product/:productId
    :productId - (Required) The ID of the product you wish to retrieve
    
    This method retrieves an individual product.
    
  POST /services/ajax/aircraft/product/:productId
  	:productId - (Required) The ID of the product you wish to update
  	@BODY - (Required) UpdateAircraftProductAjaxRequest
  	
  	This method performs an update on a single product.
@author Nathan Klick
@copyright QRef 2012
###
class ProductRoute extends AjaxRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/:productId' }, { method: 'GET', path: '/product/:productId' }]
	get: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		mgr = new ProductManager()
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			
			query = db.Product.findById(productId)
			
			
			query.exec((err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
				
					
				mgr.expand(obj, (err, eProduct) ->
					if err?
						resp = new AjaxResponse()
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new AjaxResponse()
					resp.addRecord(eProduct)
					resp.setTotal(1)
					res.json(resp, 200)
				)
				
				
			)
		)
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			# Validate Permissions Here
			
			db.Product.findById(productId, (err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure(err, 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
					
				if req.body?.name?
					obj.name = req.body.name
				
				if req.body?.productType?
					obj.productType = req.body.productType
				
				if req.body?.productCategory?
					obj.productCategory = req.body.productCategory
				
				if req.body?.isPublished?
					obj.isPublished = req.body.isPublished
				
				if req.body?.appleProductIdentifier?
					obj.appleProductIdentifier = req.body.appleProductIdentifier
				
				if req.body?.androidProductIdentifier?
					obj.androidProductIdentifier = req.body.androidProductIdentifier
					
				if req.body?.isAppleEnabled?
					obj.isAppleEnabled = req.body.isAppleEnabled
				
				if req.body?.isAndroidEnabled?
					obj.isAndroidEnabled = req.body.isAndroidEnabled
				
				if req.body?.suggestedRetailPrice?
					obj.suggestedRetailPrice = req.body.suggestedRetailPrice
				
				if req.body?.aircraftChecklist?
					obj.aircraftChecklist = req.body.aircraftChecklist
					
				if req.body?.coverImage?
					obj.coverImage = req.body.coverImage
					
				if req.body?.productIcon?
					obj.productIcon = req.body.productIcon
					
				
				
				obj.save((err) ->
					if err?
						resp = new AjaxResponse()
						resp.failure(err, 500)
						res.json(resp, 200)
						return
						
					resp = new AjaxResponse()
					resp.addRecord(obj)
					resp.setTotal(1)
					res.json(resp, 200)
				)
			)
			
			
			
		
			
		)
		

	isValidRequest: (req) ->
		if (req.query? and req.query?.token? and req.params?.productId) or
			 (req.body? and req.body?.token? and req.params?.productId? and 
			 req.body?.mode? and req.body.mode == 'ajax')
			true
		else
			false 
	
module.exports = new ProductRoute()<<<
Document event: offset: 4249, length: 1, timestamp: 4
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:37:32.259
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>AjaxRoute = require('../../../AjaxRoute')
AjaxResponse = require('../../../../serialization/AjaxResponse')
UserAuth = require('../../../../security/UserAuth')
QRefDatabase = require('../../../../db/QRefDatabase')
ProductManager = require('../../../../db/manager/ProductManager')
###
Service route that allows the retrieval and updation of an individual product.
@example Service Methods (see {UpdateAircraftProductAjaxRequest})
  Request Format: application/json
  Response Format: application/json
  
  GET /services/ajax/aircraft/product/:productId
    :productId - (Required) The ID of the product you wish to retrieve
    
    This method retrieves an individual product.
    
  POST /services/ajax/aircraft/product/:productId
  	:productId - (Required) The ID of the product you wish to update
  	@BODY - (Required) UpdateAircraftProductAjaxRequest
  	
  	This method performs an update on a single product.
@author Nathan Klick
@copyright QRef 2012
###
class ProductRoute extends AjaxRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/:productId' }, { method: 'GET', path: '/product/:productId' }]
	get: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		mgr = new ProductManager()
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			
			query = db.Product.findById(productId)
			
			
			query.exec((err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
				
					
				mgr.expand(obj, (err, eProduct) ->
					if err?
						resp = new AjaxResponse()
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new AjaxResponse()
					resp.addRecord(eProduct)
					resp.setTotal(1)
					res.json(resp, 200)
				)
				
				
			)
		)
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			# Validate Permissions Here
			
			db.Product.findById(productId, (err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure(err, 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
					
				if req.body?.name?
					obj.name = req.body.name
				
				if req.body?.productType?
					obj.productType = req.body.productType
				
				if req.body?.productCategory?
					obj.productCategory = req.body.productCategory
				
				if req.body?.isPublished?
					obj.isPublished = req.body.isPublished
				
				if req.body?.appleProductIdentifier?
					obj.appleProductIdentifier = req.body.appleProductIdentifier
				
				if req.body?.androidProductIdentifier?
					obj.androidProductIdentifier = req.body.androidProductIdentifier
					
				if req.body?.isAppleEnabled?
					obj.isAppleEnabled = req.body.isAppleEnabled
				
				if req.body?.isAndroidEnabled?
					obj.isAndroidEnabled = req.body.isAndroidEnabled
				
				if req.body?.suggestedRetailPrice?
					obj.suggestedRetailPrice = req.body.suggestedRetailPrice
				
				if req.body?.aircraftChecklist?
					obj.aircraftChecklist = req.body.aircraftChecklist
					
				if req.body?.coverImage?
					obj.coverImage = req.body.coverImage
					
				if req.body?.productIcon?
					obj.productIcon = req.body.productIcon
					
				if re
				
				obj.save((err) ->
					if err?
						resp = new AjaxResponse()
						resp.failure(err, 500)
						res.json(resp, 200)
						return
						
					resp = new AjaxResponse()
					resp.addRecord(obj)
					resp.setTotal(1)
					res.json(resp, 200)
				)
			)
			
			
			
		
			
		)
		

	isValidRequest: (req) ->
		if (req.query? and req.query?.token? and req.params?.productId) or
			 (req.body? and req.body?.token? and req.params?.productId? and 
			 req.body?.mode? and req.body.mode == 'ajax')
			true
		else
			false 
	
module.exports = new ProductRoute()<<<
Document event: offset: 4254, length: 1, timestamp: 11
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:37:53.746
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>AjaxRoute = require('../../../AjaxRoute')
AjaxResponse = require('../../../../serialization/AjaxResponse')
UserAuth = require('../../../../security/UserAuth')
QRefDatabase = require('../../../../db/QRefDatabase')
ProductManager = require('../../../../db/manager/ProductManager')
###
Service route that allows the retrieval and updation of an individual product.
@example Service Methods (see {UpdateAircraftProductAjaxRequest})
  Request Format: application/json
  Response Format: application/json
  
  GET /services/ajax/aircraft/product/:productId
    :productId - (Required) The ID of the product you wish to retrieve
    
    This method retrieves an individual product.
    
  POST /services/ajax/aircraft/product/:productId
  	:productId - (Required) The ID of the product you wish to update
  	@BODY - (Required) UpdateAircraftProductAjaxRequest
  	
  	This method performs an update on a single product.
@author Nathan Klick
@copyright QRef 2012
###
class ProductRoute extends AjaxRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/:productId' }, { method: 'GET', path: '/product/:productId' }]
	get: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		mgr = new ProductManager()
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			
			query = db.Product.findById(productId)
			
			
			query.exec((err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
				
					
				mgr.expand(obj, (err, eProduct) ->
					if err?
						resp = new AjaxResponse()
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new AjaxResponse()
					resp.addRecord(eProduct)
					resp.setTotal(1)
					res.json(resp, 200)
				)
				
				
			)
		)
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			# Validate Permissions Here
			
			db.Product.findById(productId, (err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure(err, 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
					
				if req.body?.name?
					obj.name = req.body.name
				
				if req.body?.productType?
					obj.productType = req.body.productType
				
				if req.body?.productCategory?
					obj.productCategory = req.body.productCategory
				
				if req.body?.isPublished?
					obj.isPublished = req.body.isPublished
				
				if req.body?.appleProductIdentifier?
					obj.appleProductIdentifier = req.body.appleProductIdentifier
				
				if req.body?.androidProductIdentifier?
					obj.androidProductIdentifier = req.body.androidProductIdentifier
					
				if req.body?.isAppleEnabled?
					obj.isAppleEnabled = req.body.isAppleEnabled
				
				if req.body?.isAndroidEnabled?
					obj.isAndroidEnabled = req.body.isAndroidEnabled
				
				if req.body?.suggestedRetailPrice?
					obj.suggestedRetailPrice = req.body.suggestedRetailPrice
				
				if req.body?.aircraftChecklist?
					obj.aircraftChecklist = req.body.aircraftChecklist
					
				if req.body?.coverImage?
					obj.coverImage = req.body.coverImage
					
				if req.body?.productIcon?
					obj.productIcon = req.body.productIcon
					
				if req.body?.serialNumber?
					obj.serialNumber = req.body.serialNumber
				
				
				obj.save((err) ->
					if err?
						resp = new AjaxResponse()
						resp.failure(err, 500)
						res.json(resp, 200)
						return
						
					resp = new AjaxResponse()
					resp.addRecord(obj)
					resp.setTotal(1)
					res.json(resp, 200)
				)
			)
			
			
			
		
			
		)
		

	isValidRequest: (req) ->
		if (req.query? and req.query?.token? and req.params?.productId) or
			 (req.body? and req.body?.token? and req.params?.productId? and 
			 req.body?.mode? and req.body.mode == 'ajax')
			true
		else
			false 
	
module.exports = new ProductRoute()<<<
Document event: offset: 4328, length: 1, timestamp: 75
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:38:13.771
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>AjaxRoute = require('../../../AjaxRoute')
AjaxResponse = require('../../../../serialization/AjaxResponse')
UserAuth = require('../../../../security/UserAuth')
QRefDatabase = require('../../../../db/QRefDatabase')
ProductManager = require('../../../../db/manager/ProductManager')
###
Service route that allows the retrieval and updation of an individual product.
@example Service Methods (see {UpdateAircraftProductAjaxRequest})
  Request Format: application/json
  Response Format: application/json
  
  GET /services/ajax/aircraft/product/:productId
    :productId - (Required) The ID of the product you wish to retrieve
    
    This method retrieves an individual product.
    
  POST /services/ajax/aircraft/product/:productId
  	:productId - (Required) The ID of the product you wish to update
  	@BODY - (Required) UpdateAircraftProductAjaxRequest
  	
  	This method performs an update on a single product.
@author Nathan Klick
@copyright QRef 2012
###
class ProductRoute extends AjaxRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/:productId' }, { method: 'GET', path: '/product/:productId' }]
	get: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		mgr = new ProductManager()
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			
			query = db.Product.findById(productId)
			
			
			query.exec((err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
				
					
				mgr.expand(obj, (err, eProduct) ->
					if err?
						resp = new AjaxResponse()
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new AjaxResponse()
					resp.addRecord(eProduct)
					resp.setTotal(1)
					res.json(resp, 200)
				)
				
				
			)
		)
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			# Validate Permissions Here
			
			db.Product.findById(productId, (err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure(err, 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
					
				if req.body?.name?
					obj.name = req.body.name
				
				if req.body?.productType?
					obj.productType = req.body.productType
				
				if req.body?.productCategory?
					obj.productCategory = req.body.productCategory
				
				if req.body?.isPublished?
					obj.isPublished = req.body.isPublished
				
				if req.body?.appleProductIdentifier?
					obj.appleProductIdentifier = req.body.appleProductIdentifier
				
				if req.body?.androidProductIdentifier?
					obj.androidProductIdentifier = req.body.androidProductIdentifier
					
				if req.body?.isAppleEnabled?
					obj.isAppleEnabled = req.body.isAppleEnabled
				
				if req.body?.isAndroidEnabled?
					obj.isAndroidEnabled = req.body.isAndroidEnabled
				
				if req.body?.suggestedRetailPrice?
					obj.suggestedRetailPrice = req.body.suggestedRetailPrice
				
				if req.body?.aircraftChecklist?
					obj.aircraftChecklist = req.body.aircraftChecklist
					
				if req.body?.coverImage?
					obj.coverImage = req.body.coverImage
					
				if req.body?.productIcon?
					obj.productIcon = req.body.productIcon
					
				if req.body?.serialNumber?
					obj.serialNumber = req.body.serialNumber
				
				if req.body?.isSampleProduct?
					obj.isSampleR
				
				obj.save((err) ->
					if err?
						resp = new AjaxResponse()
						resp.failure(err, 500)
						res.json(resp, 200)
						return
						
					resp = new AjaxResponse()
					resp.addRecord(obj)
					resp.setTotal(1)
					res.json(resp, 200)
				)
			)
			
			
			
		
			
		)
		

	isValidRequest: (req) ->
		if (req.query? and req.query?.token? and req.params?.productId) or
			 (req.body? and req.body?.token? and req.params?.productId? and 
			 req.body?.mode? and req.body.mode == 'ajax')
			true
		else
			false 
	
module.exports = new ProductRoute()<<<
Document event: offset: 4383, length: 1, timestamp: 121
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:38:13.941
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>AjaxRoute = require('../../../AjaxRoute')
AjaxResponse = require('../../../../serialization/AjaxResponse')
UserAuth = require('../../../../security/UserAuth')
QRefDatabase = require('../../../../db/QRefDatabase')
ProductManager = require('../../../../db/manager/ProductManager')
###
Service route that allows the retrieval and updation of an individual product.
@example Service Methods (see {UpdateAircraftProductAjaxRequest})
  Request Format: application/json
  Response Format: application/json
  
  GET /services/ajax/aircraft/product/:productId
    :productId - (Required) The ID of the product you wish to retrieve
    
    This method retrieves an individual product.
    
  POST /services/ajax/aircraft/product/:productId
  	:productId - (Required) The ID of the product you wish to update
  	@BODY - (Required) UpdateAircraftProductAjaxRequest
  	
  	This method performs an update on a single product.
@author Nathan Klick
@copyright QRef 2012
###
class ProductRoute extends AjaxRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/:productId' }, { method: 'GET', path: '/product/:productId' }]
	get: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		mgr = new ProductManager()
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			
			query = db.Product.findById(productId)
			
			
			query.exec((err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
				
					
				mgr.expand(obj, (err, eProduct) ->
					if err?
						resp = new AjaxResponse()
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new AjaxResponse()
					resp.addRecord(eProduct)
					resp.setTotal(1)
					res.json(resp, 200)
				)
				
				
			)
		)
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			# Validate Permissions Here
			
			db.Product.findById(productId, (err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure(err, 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
					
				if req.body?.name?
					obj.name = req.body.name
				
				if req.body?.productType?
					obj.productType = req.body.productType
				
				if req.body?.productCategory?
					obj.productCategory = req.body.productCategory
				
				if req.body?.isPublished?
					obj.isPublished = req.body.isPublished
				
				if req.body?.appleProductIdentifier?
					obj.appleProductIdentifier = req.body.appleProductIdentifier
				
				if req.body?.androidProductIdentifier?
					obj.androidProductIdentifier = req.body.androidProductIdentifier
					
				if req.body?.isAppleEnabled?
					obj.isAppleEnabled = req.body.isAppleEnabled
				
				if req.body?.isAndroidEnabled?
					obj.isAndroidEnabled = req.body.isAndroidEnabled
				
				if req.body?.suggestedRetailPrice?
					obj.suggestedRetailPrice = req.body.suggestedRetailPrice
				
				if req.body?.aircraftChecklist?
					obj.aircraftChecklist = req.body.aircraftChecklist
					
				if req.body?.coverImage?
					obj.coverImage = req.body.coverImage
					
				if req.body?.productIcon?
					obj.productIcon = req.body.productIcon
					
				if req.body?.serialNumber?
					obj.serialNumber = req.body.serialNumber
				
				if req.body?.isSampleProduct?
					obj.isSample
				
				obj.save((err) ->
					if err?
						resp = new AjaxResponse()
						resp.failure(err, 500)
						res.json(resp, 200)
						return
						
					resp = new AjaxResponse()
					resp.addRecord(obj)
					resp.setTotal(1)
					res.json(resp, 200)
				)
			)
			
			
			
		
			
		)
		

	isValidRequest: (req) ->
		if (req.query? and req.query?.token? and req.params?.productId) or
			 (req.body? and req.body?.token? and req.params?.productId? and 
			 req.body?.mode? and req.body.mode == 'ajax')
			true
		else
			false 
	
module.exports = new ProductRoute()<<<
Document event: offset: 4382, length: 1, timestamp: 122
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:38:31.113
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>AjaxRoute = require('../../../AjaxRoute')
AjaxResponse = require('../../../../serialization/AjaxResponse')
UserAuth = require('../../../../security/UserAuth')
QRefDatabase = require('../../../../db/QRefDatabase')
ProductManager = require('../../../../db/manager/ProductManager')
###
Service route that allows the retrieval and updation of an individual product.
@example Service Methods (see {UpdateAircraftProductAjaxRequest})
  Request Format: application/json
  Response Format: application/json
  
  GET /services/ajax/aircraft/product/:productId
    :productId - (Required) The ID of the product you wish to retrieve
    
    This method retrieves an individual product.
    
  POST /services/ajax/aircraft/product/:productId
  	:productId - (Required) The ID of the product you wish to update
  	@BODY - (Required) UpdateAircraftProductAjaxRequest
  	
  	This method performs an update on a single product.
@author Nathan Klick
@copyright QRef 2012
###
class ProductRoute extends AjaxRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/:productId' }, { method: 'GET', path: '/product/:productId' }]
	get: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		mgr = new ProductManager()
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			
			query = db.Product.findById(productId)
			
			
			query.exec((err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
				
					
				mgr.expand(obj, (err, eProduct) ->
					if err?
						resp = new AjaxResponse()
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new AjaxResponse()
					resp.addRecord(eProduct)
					resp.setTotal(1)
					res.json(resp, 200)
				)
				
				
			)
		)
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		token = req.param('token')
		productId = req.params.productId
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			# Validate Permissions Here
			
			db.Product.findById(productId, (err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure(err, 500)
					res.json(resp, 200)
					return
					
				if not obj?
					resp = new AjaxResponse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
					return
					
				if req.body?.name?
					obj.name = req.body.name
				
				if req.body?.productType?
					obj.productType = req.body.productType
				
				if req.body?.productCategory?
					obj.productCategory = req.body.productCategory
				
				if req.body?.isPublished?
					obj.isPublished = req.body.isPublished
				
				if req.body?.appleProductIdentifier?
					obj.appleProductIdentifier = req.body.appleProductIdentifier
				
				if req.body?.androidProductIdentifier?
					obj.androidProductIdentifier = req.body.androidProductIdentifier
					
				if req.body?.isAppleEnabled?
					obj.isAppleEnabled = req.body.isAppleEnabled
				
				if req.body?.isAndroidEnabled?
					obj.isAndroidEnabled = req.body.isAndroidEnabled
				
				if req.body?.suggestedRetailPrice?
					obj.suggestedRetailPrice = req.body.suggestedRetailPrice
				
				if req.body?.aircraftChecklist?
					obj.aircraftChecklist = req.body.aircraftChecklist
					
				if req.body?.coverImage?
					obj.coverImage = req.body.coverImage
					
				if req.body?.productIcon?
					obj.productIcon = req.body.productIcon
					
				if req.body?.serialNumber?
					obj.serialNumber = req.body.serialNumber
				
				if req.body?.isSampleProduct?
					obj.isSampleProduct = req.body.isSampleProduct
					
				
				
				obj.save((err) ->
					if err?
						resp = new AjaxResponse()
						resp.failure(err, 500)
						res.json(resp, 200)
						return
						
					resp = new AjaxResponse()
					resp.addRecord(obj)
					resp.setTotal(1)
					res.json(resp, 200)
				)
			)
			
			
			
		
			
		)
		

	isValidRequest: (req) ->
		if (req.query? and req.query?.token? and req.params?.productId) or
			 (req.body? and req.body?.token? and req.params?.productId? and 
			 req.body?.mode? and req.body.mode == 'ajax')
			true
		else
			false 
	
module.exports = new ProductRoute()<<<
Document event: offset: 4429, length: 1, timestamp: 159
text:><



!ENTRY org.eclipse.jface.text 4 0 2012-10-10 18:47:55.737
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.jsdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:669)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:674)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:387)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:443)
	at org.eclipse.wst.jsdt.internal.core.CompilationUnitProblemFinder.accept(CompilationUnitProblemFinder.java:174)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.askForBinding(LookupEnvironment.java:279)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:132)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:766)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:720)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.Scope.getJavaLangString(Scope.java:1745)
	at org.eclipse.wst.jsdt.core.dom.DefaultBindingResolver.resolveExpressionType(DefaultBindingResolver.java:604)
	at org.eclipse.wst.jsdt.core.dom.Expression.resolveTypeBinding(Expression.java:111)
	at org.eclipse.wst.jsdt.internal.corext.refactoring.nls.NLSHintHelper.getAccessorClassReference(NLSHintHelper.java:97)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo(NLSStringHover.java:96)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getHoverInfo2(AbstractJavaEditorTextHover.java:95)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:147)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:78)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:04.472
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		db.AircraftManufacturer.findById(manufacturerId, (err, mfr) -> 
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not mfr?
				resp = new RpcResponse(null)
				resp.failure('Manufacturer Not Found', 404)
				res.json(resp, 200)
				return
				
			db.AircraftModel.findOne()
				.where('_id')
				.equals(modelId)
				.where('manufacturer')
				.equals(mfr._id)
				.exec((err, mdl) -> 
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not mdl?
						resp = new RpcResponse(null)
						resp.failure('Model Not Found', 404)
						res.json(resp, 200)
						return
						
					db.AircraftChecklist.findOne()
						.where('model')
						.equals(mdl._id)
						.where('manufacturer')
						.equals(mfr._id)
						.where('user')
						.equals(null)
						.sort('-version')
						.exec((err, record) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not record?
								resp = new RpcResponse(1)
								res.json(resp, 200)
								return
							
							resp = new RpcResponse(record.version + 1)
							res.json(resp, 200)
					)
				)
		)
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 1070, length: 66, timestamp: 3
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:13.077
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ChecklistVersionRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.manufacturer? and req.body?.model?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 1114, length: 1371, timestamp: 4
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:54.493
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class P extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 739, length: 21, timestamp: 46
text:>P<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:55.156
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class Pr extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 740, length: 0, timestamp: 47
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:55.392
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class Pro extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 741, length: 0, timestamp: 48
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:55.980
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class Prod extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 742, length: 0, timestamp: 49
text:>d<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:56.244
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class Produ extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 743, length: 0, timestamp: 50
text:>u<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:56.442
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class Produc extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 744, length: 0, timestamp: 51
text:>c<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:56.542
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class Product extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 745, length: 0, timestamp: 52
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:56.962
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductI extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 746, length: 0, timestamp: 53
text:>I<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:57.317
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIc extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 747, length: 0, timestamp: 54
text:>c<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:57.439
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIco extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 748, length: 0, timestamp: 55
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:57.682
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIcon extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 749, length: 0, timestamp: 56
text:>n<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:58.213
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconR extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 750, length: 0, timestamp: 57
text:>R<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:58.577
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRo extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 751, length: 0, timestamp: 58
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:58.799
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRou extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 752, length: 0, timestamp: 59
text:>u<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:59.084
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRout extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 753, length: 0, timestamp: 60
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:53:59.189
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ChecklistVersionRoute()<<<
Document event: offset: 754, length: 0, timestamp: 61
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:54:05.402
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/version' }, { method: 'GET', path: '/checklist/version' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1296, length: 21, timestamp: 62
text:>ProductIconRoute<



!ENTRY org.apache.log4j 2 0 2012-10-10 18:54:34.528
!MESSAGE csep.parser.Lexer  - Unexpected symbol [1,156:1,157 -4 ']

!STACK 0
java.lang.Exception
	at csep.parser.Lexer.nextToken(Lexer.java:68)
	at org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:119)
	at csep.parser.FirstCommentIncludingXtextTokenStream.toString(FirstCommentIncludingXtextTokenStream.java:26)
	at org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser.parse(AbstractInternalAntlrParser.java:524)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:102)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.parse(AbstractAntlrParser.java:84)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:62)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:70)
	at org.eclipse.xtext.parser.AbstractParser.reparse(AbstractParser.java:38)
	at org.eclipse.xtext.resource.XtextResource.update(XtextResource.java:217)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:55)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:49)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:181)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:90)
	at org.eclipse.xtext.ui.editor.reconciler.XtextDocumentReconcileStrategy.reconcile(XtextDocumentReconcileStrategy.java:44)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:254)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.apache.log4j 4 0 2012-10-10 18:54:56.164
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
	
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1058, length: 1, timestamp: 75
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:54:56.413
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		

		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1057, length: 1, timestamp: 76
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:54:56.936
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
	
		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1054, length: 1, timestamp: 78
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:54:57.266
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		

		db = QRefDatabase.instance()
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1053, length: 1, timestamp: 79
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:15.101
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys 
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1096, length: 1, timestamp: 91
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:21.116
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(r)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1110, length: 0, timestamp: 106
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:21.343
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(re)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1111, length: 0, timestamp: 107
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:21.665
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1112, length: 0, timestamp: 108
text:>q<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:21.953
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1113, length: 0, timestamp: 109
text:>.<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:22.705
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.f)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1114, length: 0, timestamp: 110
text:>f<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:22.909
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.fi)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1115, length: 0, timestamp: 111
text:>i<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:23.101
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.fil)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1116, length: 0, timestamp: 112
text:>l<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:23.174
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.file)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1117, length: 0, timestamp: 113
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:23.426
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1118, length: 0, timestamp: 114
text:>s<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:55:48.891
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		
		if fileKeys.length == 0
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1260, length: 1, timestamp: 143
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:56:10.135
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('')
		
		if fileKeys.length == 0
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1142, length: 0, timestamp: 164
text:>''<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:56:15.963
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		prodyc
		
		if fileKeys.length == 0
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1160, length: 1, timestamp: 178
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:56:16.123
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		prody
		
		if fileKeys.length == 0
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1159, length: 1, timestamp: 179
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:56:16.296
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		prod
		
		if fileKeys.length == 0
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1158, length: 1, timestamp: 180
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:56:32.567
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productI = req.body.product
		
		if fileKeys.length == 0
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1161, length: 0, timestamp: 203
text:>I<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:56:32.856
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1162, length: 0, timestamp: 204
text:>d<



!ENTRY org.apache.log4j 2 0 2012-10-10 18:56:44.951
!MESSAGE csep.parser.Lexer  - Unexpected symbol [1,234:1,235 -4 ']

!STACK 0
java.lang.Exception
	at csep.parser.Lexer.nextToken(Lexer.java:68)
	at org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:119)
	at csep.parser.FirstCommentIncludingXtextTokenStream.toString(FirstCommentIncludingXtextTokenStream.java:26)
	at org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser.parse(AbstractInternalAntlrParser.java:524)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:102)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.parse(AbstractAntlrParser.java:84)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:62)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:70)
	at org.eclipse.xtext.parser.AbstractParser.reparse(AbstractParser.java:38)
	at org.eclipse.xtext.resource.XtextResource.update(XtextResource.java:217)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:55)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:49)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:181)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:90)
	at org.eclipse.xtext.ui.editor.reconciler.XtextDocumentReconcileStrategy.reconcile(XtextDocumentReconcileStrategy.java:44)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:254)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.apache.log4j 4 0 2012-10-10 18:56:48.363
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 278, length: 0, timestamp: 219
text:>''<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:36.037
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(p)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1389, length: 0, timestamp: 265
text:>p<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:36.247
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(pr)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1390, length: 0, timestamp: 266
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:36.467
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(pro)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1391, length: 0, timestamp: 267
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:37.012
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(prod)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1392, length: 0, timestamp: 268
text:>d<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:37.194
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(produ)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1393, length: 0, timestamp: 269
text:>u<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:37.389
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(produc)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1394, length: 0, timestamp: 270
text:>c<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:37.552
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(product)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1395, length: 0, timestamp: 271
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:38.534
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productI)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1396, length: 0, timestamp: 272
text:>I<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:38.857
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1397, length: 0, timestamp: 273
text:>d<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:39.137
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId,)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1398, length: 0, timestamp: 274
text:>,<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:39.364
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, )
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1399, length: 0, timestamp: 275
text:> <



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:40.274
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, ())
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1400, length: 0, timestamp: 276
text:>()<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:40.619
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (e))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1401, length: 0, timestamp: 277
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:40.878
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (er))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1402, length: 0, timestamp: 278
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:41.037
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1403, length: 0, timestamp: 279
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:41.454
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err,))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1404, length: 0, timestamp: 280
text:>,<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:41.629
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, ))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1405, length: 0, timestamp: 281
text:> <



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:42.189
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, p))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1406, length: 0, timestamp: 282
text:>p<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:42.351
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, pr))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1407, length: 0, timestamp: 283
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:42.492
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, pro))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1408, length: 0, timestamp: 284
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:42.697
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, prod))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1409, length: 0, timestamp: 285
text:>d<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:42.842
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, produ))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1410, length: 0, timestamp: 286
text:>u<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:43.032
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, produc))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1411, length: 0, timestamp: 287
text:>c<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:43.165
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product))
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1412, length: 0, timestamp: 288
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:44.045
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) )
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1414, length: 0, timestamp: 289
text:> <



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:44.575
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) -)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1415, length: 0, timestamp: 290
text:>-<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:45.022
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1416, length: 0, timestamp: 291
text:>><



!ENTRY org.apache.log4j 4 0 2012-10-10 18:57:45.440
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1417, length: 0, timestamp: 292
text:>
			
		<



!ENTRY org.apache.log4j 4 0 2012-10-10 18:58:14.345
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1546, length: 1, timestamp: 328
text:><



!ENTRY org.apache.log4j 2 0 2012-10-10 18:58:19.353
!MESSAGE csep.parser.Lexer  - Unexpected symbol [1,609:1,610 -4 ']

!STACK 0
java.lang.Exception
	at csep.parser.Lexer.nextToken(Lexer.java:68)
	at org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:119)
	at csep.parser.FirstCommentIncludingXtextTokenStream.toString(FirstCommentIncludingXtextTokenStream.java:26)
	at org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser.parse(AbstractInternalAntlrParser.java:524)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:102)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.parse(AbstractAntlrParser.java:84)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:62)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:70)
	at org.eclipse.xtext.parser.AbstractParser.reparse(AbstractParser.java:38)
	at org.eclipse.xtext.resource.XtextResource.update(XtextResource.java:217)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:55)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:49)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:181)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:90)
	at org.eclipse.xtext.ui.editor.reconciler.XtextDocumentReconcileStrategy.reconcile(XtextDocumentReconcileStrategy.java:44)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:254)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.apache.log4j 4 0 2012-10-10 18:58:37.266
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
				
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1684, length: 1, timestamp: 369
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:18.870
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1785, length: 1, timestamp: 476
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:37.150
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[f]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1807, length: 0, timestamp: 495
text:>f<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:37.363
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fi]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1808, length: 0, timestamp: 496
text:>i<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:37.503
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fil]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1809, length: 0, timestamp: 497
text:>l<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:37.603
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[file]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1810, length: 0, timestamp: 498
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:38.131
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileK]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1811, length: 0, timestamp: 499
text:>K<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:38.476
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKe]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1812, length: 0, timestamp: 500
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:38.638
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKey]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1813, length: 0, timestamp: 501
text:>y<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:38.833
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1814, length: 0, timestamp: 502
text:>s<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:39.739
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[]]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1815, length: 0, timestamp: 503
text:>[]<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:40.171
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		path = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1816, length: 0, timestamp: 504
text:>0<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:55.646
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fpath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1210, length: 0, timestamp: 507
text:>f<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:55.905
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fspath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1211, length: 0, timestamp: 508
text:>s<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:59.418
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1212, length: 1, timestamp: 509
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:00:59.933
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1212, length: 0, timestamp: 510
text:>P<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:26.705
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			fileName =
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1841, length: 1, timestamp: 522
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:26.901
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			fileName 
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1840, length: 1, timestamp: 523
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:27.013
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			fileName
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1839, length: 1, timestamp: 524
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:27.173
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			fileNam
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1838, length: 1, timestamp: 525
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:27.332
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			fileNa
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1837, length: 1, timestamp: 526
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:27.480
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			fileN
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1836, length: 1, timestamp: 527
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:27.622
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			file
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1835, length: 1, timestamp: 528
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:27.895
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			fil
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1834, length: 1, timestamp: 529
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:27.912
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			fi
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1833, length: 1, timestamp: 530
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:28.055
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			f
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1832, length: 1, timestamp: 531
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:28.205
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1831, length: 1, timestamp: 532
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:06:47.605
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('')
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1859, length: 0, timestamp: 566
text:>''<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:10.179
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(s)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1895, length: 0, timestamp: 596
text:>s<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:10.424
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(sl)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1896, length: 0, timestamp: 597
text:>l<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:10.646
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(sla)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1897, length: 0, timestamp: 598
text:>a<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:10.901
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slas)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1898, length: 0, timestamp: 599
text:>s<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:11.006
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slash)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1899, length: 0, timestamp: 600
text:>h<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:11.386
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashP)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1900, length: 0, timestamp: 601
text:>P<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:11.569
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPo)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1901, length: 0, timestamp: 602
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:11.900
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1902, length: 0, timestamp: 603
text:>s<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:25.568
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1903, length: 0, timestamp: 604
text:>+<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:26.079
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1904, length: 0, timestamp: 605
text:>1<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:26.916
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1,)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 0, timestamp: 606
text:>,<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:27.152
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, )
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1906, length: 0, timestamp: 607
text:> <



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:28.169
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, f)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1907, length: 0, timestamp: 608
text:>f<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:28.374
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, fi)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1908, length: 0, timestamp: 609
text:>i<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:28.556
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, fil)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1909, length: 0, timestamp: 610
text:>l<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:28.656
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1910, length: 0, timestamp: 611
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:28.989
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1911, length: 0, timestamp: 612
text:>.<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:29.329
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.p)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1912, length: 0, timestamp: 613
text:>p<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:29.556
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.pa)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1913, length: 0, timestamp: 614
text:>a<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:29.764
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.pat)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1914, length: 0, timestamp: 615
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:29.967
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1915, length: 0, timestamp: 616
text:>h<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:30.590
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1916, length: 0, timestamp: 617
text:>.<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:31.016
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.l)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1917, length: 0, timestamp: 618
text:>l<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:31.219
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.le)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1918, length: 0, timestamp: 619
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:32.204
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.l)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1918, length: 1, timestamp: 620
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:32.389
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1917, length: 1, timestamp: 621
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:33.020
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.l)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1917, length: 0, timestamp: 622
text:>l<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:33.681
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.le)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1918, length: 0, timestamp: 623
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:33.861
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.len)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1919, length: 0, timestamp: 624
text:>n<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:34.151
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.leng)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1920, length: 0, timestamp: 625
text:>g<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:34.347
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.lengt)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1921, length: 0, timestamp: 626
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:07:34.507
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1, file.path.length)
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1922, length: 0, timestamp: 627
text:>h<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:46.235
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1 file.path.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 630
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:46.330
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1file.path.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 631
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:46.478
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1ile.path.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 632
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:46.623
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1le.path.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 633
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:46.765
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1e.path.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 634
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:46.899
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1.path.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 635
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:47.054
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1path.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 636
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:47.276
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1ath.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 637
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:47.469
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1th.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 638
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:47.611
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1h.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 639
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:47.764
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1.length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 640
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:47.864
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1length)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 641
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:48.064
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1ength)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 642
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:48.319
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1ngth)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 643
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:48.506
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1gth)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 644
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:48.644
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1th)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 645
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:48.846
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1h)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 646
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:08:49.386
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			fileName = file.path.slice(slashPos+1)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1905, length: 1, timestamp: 647
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:10.291
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1893, length: 0, timestamp: 665
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:12.176
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1937, length: 1, timestamp: 667
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:20.513
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1972, length: 1, timestamp: 694
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:33.073
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			fs.rename(f)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1987, length: 0, timestamp: 706
text:>f<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:33.301
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			fs.rename(fi)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1988, length: 0, timestamp: 707
text:>i<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:33.443
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			fs.rename(fil)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1989, length: 0, timestamp: 708
text:>l<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:33.523
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			fs.rename(file)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1990, length: 0, timestamp: 709
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:33.771
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			fs.rename(file.)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1991, length: 0, timestamp: 710
text:>.<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:34.108
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			fs.rename(file.p)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1992, length: 0, timestamp: 711
text:>p<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:34.318
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			fs.rename(file.pa)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1993, length: 0, timestamp: 712
text:>a<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:35.359
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			fs.rename(file.pat)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1994, length: 0, timestamp: 713
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:16:35.501
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			fs.rename(file.path)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1995, length: 0, timestamp: 714
text:>h<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:03.663
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = fsPath
			
			fs.rename(file.path)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2034, length: 1, timestamp: 771
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:03.823
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = fsPat
			
			fs.rename(file.path)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2033, length: 1, timestamp: 772
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:03.993
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = fsPa
			
			fs.rename(file.path)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2032, length: 1, timestamp: 773
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:04.138
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = fsP
			
			fs.rename(file.path)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2031, length: 1, timestamp: 774
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:04.333
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = fs
			
			fs.rename(file.path)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2030, length: 1, timestamp: 775
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:04.478
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = f
			
			fs.rename(file.path)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2029, length: 1, timestamp: 776
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:04.638
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = 
			
			fs.rename(file.path)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2028, length: 1, timestamp: 777
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:15.843
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path,)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2075, length: 0, timestamp: 796
text:>,<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:16.023
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, )
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2076, length: 0, timestamp: 797
text:> <



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:17.138
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, t)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2077, length: 0, timestamp: 798
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:17.321
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, ta)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2078, length: 0, timestamp: 799
text:>a<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:17.481
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, tar)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2079, length: 0, timestamp: 800
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:17.756
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targ)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2080, length: 0, timestamp: 801
text:>g<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:17.916
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targe)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2081, length: 0, timestamp: 802
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:18.096
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, target)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2082, length: 0, timestamp: 803
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:18.861
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetP)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2083, length: 0, timestamp: 804
text:>P<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:19.228
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPa)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2084, length: 0, timestamp: 805
text:>a<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:19.368
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPat)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2085, length: 0, timestamp: 806
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:19.531
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2086, length: 0, timestamp: 807
text:>h<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:20.576
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath,)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2087, length: 0, timestamp: 808
text:>,<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:20.718
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, )
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2088, length: 0, timestamp: 809
text:> <



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:21.573
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, ())
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2089, length: 0, timestamp: 810
text:>()<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:21.815
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (e))
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2090, length: 0, timestamp: 811
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:22.051
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (er))
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2091, length: 0, timestamp: 812
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:22.221
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err))
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2092, length: 0, timestamp: 813
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:22.985
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) )
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2094, length: 0, timestamp: 814
text:> <



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:23.584
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) -)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2095, length: 0, timestamp: 815
text:>-<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:23.990
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2096, length: 0, timestamp: 816
text:>><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:24.508
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2097, length: 0, timestamp: 817
text:>
				
			<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:17:46.427
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2232, length: 1, timestamp: 831
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:18:45.368
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save(())
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2298, length: 0, timestamp: 883
text:>()<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:18:45.708
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((e))
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2299, length: 0, timestamp: 884
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:18:45.927
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((er))
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2300, length: 0, timestamp: 885
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:18:46.103
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err))
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2301, length: 0, timestamp: 886
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:18:47.037
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) )
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2303, length: 0, timestamp: 887
text:> <



!ENTRY org.apache.log4j 4 0 2012-10-10 19:18:47.580
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) -)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2304, length: 0, timestamp: 888
text:>-<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:18:47.976
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2305, length: 0, timestamp: 889
text:>><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:18:48.339
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2306, length: 0, timestamp: 890
text:>
					
				<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:03.935
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2447, length: 1, timestamp: 904
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:16.587
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(t)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2477, length: 4, timestamp: 907
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:16.733
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(ta)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2478, length: 0, timestamp: 908
text:>a<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:16.873
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(tar)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2479, length: 0, timestamp: 909
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:17.161
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targ)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2480, length: 0, timestamp: 910
text:>g<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:17.231
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targe)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2481, length: 0, timestamp: 911
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:17.402
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(target)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2482, length: 0, timestamp: 912
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:18.170
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetW)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2483, length: 0, timestamp: 913
text:>W<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:18.575
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWe)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2484, length: 0, timestamp: 914
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:18.830
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWeb)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2485, length: 0, timestamp: 915
text:>b<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:19.250
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebP)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2486, length: 0, timestamp: 916
text:>P<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:19.537
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPa)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2487, length: 0, timestamp: 917
text:>a<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:19.677
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPat)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2488, length: 0, timestamp: 918
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:19.800
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2489, length: 0, timestamp: 919
text:>h<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:24.094
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2498, length: 35, timestamp: 920
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:24.315
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
				
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2497, length: 1, timestamp: 921
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:24.542
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
			
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2496, length: 1, timestamp: 922
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:24.759
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
		
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2495, length: 1, timestamp: 923
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:24.999
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
	
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2494, length: 1, timestamp: 924
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:19:25.257
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that returns the next available version of a given checklist.
@example Service Methods (see {ChecklistVersionRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/checklist/version
    @BODY - (Required) ChecklistVersionRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)

					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2493, length: 1, timestamp: 925
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:24.257
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.c = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2246, length: 11, timestamp: 40
text:>c<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:24.582
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.co = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2247, length: 0, timestamp: 41
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:24.839
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.cov = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2248, length: 0, timestamp: 42
text:>v<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:24.937
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.cove = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2249, length: 0, timestamp: 43
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:25.257
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.cover = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2250, length: 0, timestamp: 44
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:25.662
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverI = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2251, length: 0, timestamp: 45
text:>I<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:25.910
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverIm = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2252, length: 0, timestamp: 46
text:>m<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:26.052
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverIma = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2253, length: 0, timestamp: 47
text:>a<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:26.272
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImag = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2254, length: 0, timestamp: 48
text:>g<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:22:26.342
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2255, length: 0, timestamp: 49
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:54.856
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIcnRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 765, length: 1, timestamp: 55
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:55.031
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductInRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 764, length: 1, timestamp: 56
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:55.188
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductnRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 763, length: 1, timestamp: 57
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:55.401
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProducnRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 762, length: 1, timestamp: 58
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:56.428
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductnRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 762, length: 0, timestamp: 59
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:56.703
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCnRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 763, length: 0, timestamp: 60
text:>C<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:56.928
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductConRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 764, length: 0, timestamp: 61
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:57.193
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCovnRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 765, length: 0, timestamp: 62
text:>v<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:57.678
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCovenRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 766, length: 0, timestamp: 63
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:28:57.941
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCovernRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 767, length: 0, timestamp: 64
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:29:03.476
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 768, length: 1, timestamp: 65
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:29:09.839
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure('Internal Error', 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2760, length: 16, timestamp: 66
text:>ProductCoverRoute<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:07.485
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class P extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 266, length: 15, timestamp: 3
text:>P<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:07.791
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class Pr extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 267, length: 0, timestamp: 4
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:07.950
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class Pro extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 268, length: 0, timestamp: 5
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:08.125
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class Prod extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 269, length: 0, timestamp: 6
text:>d<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:08.262
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class Produ extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 270, length: 0, timestamp: 7
text:>u<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:08.427
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class Produc extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 271, length: 0, timestamp: 8
text:>c<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:08.547
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class Product extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 272, length: 0, timestamp: 9
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:08.878
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductI extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 273, length: 0, timestamp: 10
text:>I<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:09.150
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIm extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 274, length: 0, timestamp: 11
text:>m<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:09.312
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIma extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 275, length: 0, timestamp: 12
text:>a<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:09.470
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImag extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 276, length: 0, timestamp: 13
text:>g<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:09.609
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImage extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 277, length: 0, timestamp: 14
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:10.179
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageR extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 278, length: 0, timestamp: 15
text:>R<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:10.322
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRp extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 279, length: 0, timestamp: 16
text:>p<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:10.520
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpc extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 280, length: 0, timestamp: 17
text:>c<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:11.274
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcR extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 281, length: 0, timestamp: 18
text:>R<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:11.888
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRe extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 282, length: 0, timestamp: 19
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:12.170
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcReq extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 283, length: 0, timestamp: 20
text:>q<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:12.269
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequ extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 284, length: 0, timestamp: 21
text:>u<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:12.409
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcReque extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 285, length: 0, timestamp: 22
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:12.602
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcReques extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 286, length: 0, timestamp: 23
text:>s<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:12.705
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = LoginRpcRequest<<<
Document event: offset: 287, length: 0, timestamp: 24
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:18.897
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true
	###
	@property [String] (Required) The clear text version of the user's password.
	###
	password: 
		type: String
		required: true
module.exports = ProductImageRpcRequest<<<
Document event: offset: 664, length: 15, timestamp: 25
text:>ProductImageRpcRequest<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:24.930
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	userName: 
		type: String
		required: true
		unique: true

module.exports = ProductImageRpcRequest<<<
Document event: offset: 509, length: 1, timestamp: 31
text:><



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:27.182
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	p: 
		type: String
		required: true
		unique: true
module.exports = ProductImageRpcRequest<<<
Document event: offset: 447, length: 8, timestamp: 33
text:>p<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:27.375
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	pr: 
		type: String
		required: true
		unique: true
module.exports = ProductImageRpcRequest<<<
Document event: offset: 448, length: 0, timestamp: 34
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:27.540
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	pro: 
		type: String
		required: true
		unique: true
module.exports = ProductImageRpcRequest<<<
Document event: offset: 449, length: 0, timestamp: 35
text:>o<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:27.682
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	prod: 
		type: String
		required: true
		unique: true
module.exports = ProductImageRpcRequest<<<
Document event: offset: 450, length: 0, timestamp: 36
text:>d<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:27.847
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	produ: 
		type: String
		required: true
		unique: true
module.exports = ProductImageRpcRequest<<<
Document event: offset: 451, length: 0, timestamp: 37
text:>u<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:27.987
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	produc: 
		type: String
		required: true
		unique: true
module.exports = ProductImageRpcRequest<<<
Document event: offset: 452, length: 0, timestamp: 38
text:>c<



!ENTRY org.apache.log4j 4 0 2012-10-10 19:30:28.214
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRequest = require('../../../serialization/RpcRequest')
###
Object sent as the body of an HTTP POST request to perform user authentication.
@note The token property is not required when using this method.
@author Nathan Klick
@copyright QRef 2012
###
class ProductImageRpcRequest extends RpcRequest
	###
	@property [String] (Required) The username used to perform authentication. This should always be the user's email address.
	###
	product: 
		type: String
		required: true
		unique: true
module.exports = ProductImageRpcRequest<<<
Document event: offset: 453, length: 0, timestamp: 39
text:>t<


!SESSION 2012-10-15 11:52:34.617 -----------------------------------------------
eclipse.buildId=M20120208-0800
java.version=1.7.0_05
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.core.resources 2 10035 2012-10-15 11:52:45.108
!MESSAGE The workspace exited with unsaved changes in the previous session; refreshing workspace to recover changes.

!ENTRY org.eclipse.jst.jsp.core 4 4 2012-10-15 11:53:27.599
!MESSAGE A workspace crash was detected. The previous session did not exit normally. Not using saved taglib indexes.

!ENTRY org.apache.log4j 4 0 2012-10-15 12:11:57.722
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(er, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1589, length: 0, timestamp: 3
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:11:57.751
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1590, length: 0, timestamp: 4
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:04.661
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(er, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2150, length: 0, timestamp: 6
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:04.835
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2151, length: 0, timestamp: 7
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:09.135
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(er, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2349, length: 0, timestamp: 9
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:09.300
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/icons/'
		webPath = 'images/products/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2350, length: 0, timestamp: 10
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:21.697
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(er, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 1594, length: 0, timestamp: 3
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:21.847
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 1595, length: 0, timestamp: 4
text:>r<



!ENTRY org.eclipse.ui 4 0 2012-10-15 12:12:26.899
!MESSAGE Unhandled event loop exception
!STACK 0
org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature)
	at org.eclipse.swt.SWT.error(SWT.java:4282)
	at org.eclipse.swt.SWT.error(SWT.java:4197)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:138)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
Caused by: java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eStructuralFeature(BasicEObjectImpl.java:739)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eObjectForURIFragmentSegment(BasicEObjectImpl.java:533)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:780)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:756)
	at org.eclipse.xtext.resource.XtextResource.access$1(XtextResource.java:1)
	at org.eclipse.xtext.resource.XtextResource$1.getEObject(XtextResource.java:104)
	at org.eclipse.xtext.resource.DefaultFragmentProvider.getEObject(DefaultFragmentProvider.java:26)
	at org.eclipse.xtext.resource.XtextResource.getEObject(XtextResource.java:289)
	at org.eclipse.xtext.linking.lazy.LazyLinkingResource.getEObject(LazyLinkingResource.java:219)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:112)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:32)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:78)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.selectAndReveal(GlobalURIEditorOpener.java:108)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.openDefaultEditor(GlobalURIEditorOpener.java:92)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.open(GlobalURIEditorOpener.java:70)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:44)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:40)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.createLinkingIssueResolutions(DefaultQuickfixProvider.java:94)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutionsForLinkingIssue(DefaultQuickfixProvider.java:88)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutions(DefaultQuickfixProvider.java:202)
	at org.eclipse.xtext.ui.editor.quickfix.AbstractIssueResolutionProviderAdapter.getResolutions(AbstractIssueResolutionProviderAdapter.java:42)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.createQuickfixes(XtextQuickAssistProcessor.java:122)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.computeQuickAssistProposals(XtextQuickAssistProcessor.java:98)
	at org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover$CompletionProposalRunnable.run(AnnotationWithQuickFixesHover.java:592)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	... 23 more

!ENTRY org.eclipse.jface.text 4 0 2012-10-15 12:12:26.964
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature)
	at org.eclipse.swt.SWT.error(SWT.java:4282)
	at org.eclipse.swt.SWT.error(SWT.java:4197)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:196)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:150)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4683)
	at org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover.getHoverInfoInternal(AnnotationWithQuickFixesHover.java:692)
	at org.eclipse.xtext.ui.editor.hover.AbstractProblemHover.getHoverInfo2(AbstractProblemHover.java:56)
	at org.eclipse.xtext.ui.editor.hover.AbstractCompositeHover.getHoverInfo2(AbstractCompositeHover.java:90)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
Caused by: java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eStructuralFeature(BasicEObjectImpl.java:739)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eObjectForURIFragmentSegment(BasicEObjectImpl.java:533)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:780)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:756)
	at org.eclipse.xtext.resource.XtextResource.access$1(XtextResource.java:1)
	at org.eclipse.xtext.resource.XtextResource$1.getEObject(XtextResource.java:104)
	at org.eclipse.xtext.resource.DefaultFragmentProvider.getEObject(DefaultFragmentProvider.java:26)
	at org.eclipse.xtext.resource.XtextResource.getEObject(XtextResource.java:289)
	at org.eclipse.xtext.linking.lazy.LazyLinkingResource.getEObject(LazyLinkingResource.java:219)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:112)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:32)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:78)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.selectAndReveal(GlobalURIEditorOpener.java:108)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.openDefaultEditor(GlobalURIEditorOpener.java:92)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.open(GlobalURIEditorOpener.java:70)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:44)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:40)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.createLinkingIssueResolutions(DefaultQuickfixProvider.java:94)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutionsForLinkingIssue(DefaultQuickfixProvider.java:88)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutions(DefaultQuickfixProvider.java:202)
	at org.eclipse.xtext.ui.editor.quickfix.AbstractIssueResolutionProviderAdapter.getResolutions(AbstractIssueResolutionProviderAdapter.java:42)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.createQuickfixes(XtextQuickAssistProcessor.java:122)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.computeQuickAssistProposals(XtextQuickAssistProcessor.java:98)
	at org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover$CompletionProposalRunnable.run(AnnotationWithQuickFixesHover.java:592)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)

!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:26.970
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(er, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2155, length: 0, timestamp: 6
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:27.145
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2156, length: 0, timestamp: 7
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:31.061
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(er, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2353, length: 0, timestamp: 9
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:12:31.206
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2354, length: 0, timestamp: 10
text:>r<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:52.409
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			console.log("")
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2057, length: 0, timestamp: 24
text:>""<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:55.870
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			console.log
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2056, length: 2, timestamp: 28
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.314
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			console.lo
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2055, length: 1, timestamp: 29
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.338
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			console.l
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2054, length: 1, timestamp: 30
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.363
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			console.
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2053, length: 1, timestamp: 31
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.387
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			console
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2052, length: 1, timestamp: 32
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.411
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			consol
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2051, length: 1, timestamp: 33
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.436
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			conso
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2050, length: 1, timestamp: 34
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.460
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			cons
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2049, length: 1, timestamp: 35
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.484
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			con
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2048, length: 1, timestamp: 36
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.693
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			co
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2047, length: 1, timestamp: 37
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:56.864
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			c
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2046, length: 1, timestamp: 38
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:57.011
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2045, length: 1, timestamp: 39
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:57.188
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
		
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2044, length: 1, timestamp: 40
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:57.357
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
	
			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2043, length: 1, timestamp: 41
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:18:57.532
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			

			fs.rename(file.path, targetPath, (err) ->
				if err?
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2042, length: 1, timestamp: 42
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:19:05.322
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2118, length: 0, timestamp: 57
text:>""<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:21:05.301
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/products/covers/'
		webPath = 'images/products/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2098, length: 1, timestamp: 243
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:46.222
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			if file
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1966, length: 1, timestamp: 25
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:46.389
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			if fil
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1965, length: 1, timestamp: 26
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:46.544
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			if fi
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1964, length: 1, timestamp: 27
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:46.718
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			if f
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1963, length: 1, timestamp: 28
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:46.880
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1962, length: 1, timestamp: 29
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:49.585
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			if fil
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1965, length: 1, timestamp: 34
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:49.757
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			if fi
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1964, length: 1, timestamp: 35
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:49.940
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			if f
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1963, length: 1, timestamp: 36
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:50.101
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1962, length: 1, timestamp: 37
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:57.283
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			re
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1961, length: 1, timestamp: 43
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:57.451
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			r
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1960, length: 1, timestamp: 44
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:27:57.617
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1959, length: 1, timestamp: 45
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.277
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgRe = /jpeg
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1972, length: 1, timestamp: 60
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.720
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgRe = /jpe
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1971, length: 1, timestamp: 61
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.745
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgRe = /jp
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1970, length: 1, timestamp: 62
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.768
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgRe = /j
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1969, length: 1, timestamp: 63
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.793
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgRe = /
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1968, length: 1, timestamp: 64
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.817
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgRe = 
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1967, length: 1, timestamp: 65
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.841
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgRe =
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1966, length: 1, timestamp: 66
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.865
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgRe 
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1965, length: 1, timestamp: 67
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.889
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgRe
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1964, length: 1, timestamp: 68
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.913
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpgR
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1963, length: 1, timestamp: 69
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.938
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jpg
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1962, length: 1, timestamp: 70
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.962
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			jp
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1961, length: 1, timestamp: 71
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:16.986
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			j
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1960, length: 1, timestamp: 72
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:17.290
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1959, length: 1, timestamp: 73
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:20.562
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			
			if
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1971, length: 1, timestamp: 74
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:20.719
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			
			i
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1970, length: 1, timestamp: 75
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:20.876
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			
			
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1969, length: 1, timestamp: 76
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:21.034
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			
		
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1968, length: 1, timestamp: 77
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:21.188
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			
	
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1967, length: 1, timestamp: 78
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:21.350
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			

			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1966, length: 1, timestamp: 79
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:21.726
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
		
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1963, length: 1, timestamp: 81
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:21.944
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
	
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1962, length: 1, timestamp: 82
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:22.152
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			

			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1961, length: 1, timestamp: 83
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:22.692
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
		
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1958, length: 1, timestamp: 85
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:22.871
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
	
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1957, length: 1, timestamp: 86
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:28:23.041
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			

			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1956, length: 1, timestamp: 87
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:31:26.497
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 300, length: 0, timestamp: 105
text:>''<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:31:35.371
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			extsi
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1988, length: 1, timestamp: 117
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:31:35.534
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			exts
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1987, length: 1, timestamp: 118
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:31:35.700
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 1986, length: 1, timestamp: 119
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:15.722
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(f)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2004, length: 0, timestamp: 138
text:>f<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:15.905
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(fi)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2005, length: 0, timestamp: 139
text:>i<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:16.016
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(fil)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2006, length: 0, timestamp: 140
text:>l<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:16.170
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2007, length: 0, timestamp: 141
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:16.322
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2008, length: 0, timestamp: 142
text:>.<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:17.908
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.t)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2009, length: 0, timestamp: 143
text:>t<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:18.127
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.ty)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2010, length: 0, timestamp: 144
text:>y<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:18.417
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.typ)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2011, length: 0, timestamp: 145
text:>p<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:18.539
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2012, length: 0, timestamp: 146
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:24.450
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			
			if ex
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2029, length: 1, timestamp: 155
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:24.581
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			
			if e
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2028, length: 1, timestamp: 156
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:24.738
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			
			if 
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2027, length: 1, timestamp: 157
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:24.877
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			
			if
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2026, length: 1, timestamp: 158
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:25.065
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			
			i
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2025, length: 1, timestamp: 159
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:25.220
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			
			
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2024, length: 1, timestamp: 160
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:25.371
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			
		
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2023, length: 1, timestamp: 161
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:25.513
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			
	
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2022, length: 1, timestamp: 162
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:25.669
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
			

			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2021, length: 1, timestamp: 163
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:26.258
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded productIcon and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/icon
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductIconRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/icon' }, { method: 'GET', path: '/product/icon' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/icons/'
		webPath = 'images/product/icons/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			ext = mime.extension(file.type)
		
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.productIcon = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductIconRoute()<<<
Document event: offset: 2018, length: 1, timestamp: 165
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:46.675
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 300, length: 0, timestamp: 263
text:>''<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:51.995
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
				
			
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 1989, length: 1, timestamp: 270
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:55.454
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
				
			ext = mime.ext
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2003, length: 1, timestamp: 286
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:57.343
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
				
			ext = mime.extension
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2009, length: 1, timestamp: 294
text:><



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:58.306
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
				
			ext = mime.extension(f)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2010, length: 0, timestamp: 296
text:>f<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:58.475
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
				
			ext = mime.extension(fi)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2011, length: 0, timestamp: 297
text:>i<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:58.599
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
				
			ext = mime.extension(fil)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2012, length: 0, timestamp: 298
text:>l<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:58.683
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
				
			ext = mime.extension(file)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2013, length: 0, timestamp: 299
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:58.853
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
				
			ext = mime.extension(file.)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2014, length: 0, timestamp: 300
text:>.<



!ENTRY org.apache.log4j 4 0 2012-10-15 12:32:59.220
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
fs = require('fs')
mime = require('mime')
###
Service route that saves an uploaded coverImage and returns the final path to image.
@example Service Methods (see {ProductImageRpcRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/cover
    @BODY - (Required) ProductImageRpcRequest
    
	Returns the next available version number in the returnValue field of the response object.
@author Nathan Klick
@copyright QRef 2012
###
class ProductCoverRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/cover' }, { method: 'GET', path: '/product/cover' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = QRefDatabase.instance()
		fileKeys = Object.keys(req.files)
		token = req.param('token')
		productId = req.body.product
		
		fsPath = '/storage/http/qref/WebContent/images/product/covers/'
		webPath = 'images/product/covers/'
		
		if fileKeys.length == 0 or fileKeys.length > 1
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db.Product.findById(productId, (err, product) ->
			if err?
				resp = new RpcResponse(null)
				resp.failure(err, 500)
				res.json(resp, 200)
				return
			
			if not product?
				resp = new RpcResponse(null)
				resp.failure('Not Found', 404)
				res.json(resp, 200)
				return
			
			file = req.files[fileKeys[0]]
			slashPos = file.path.lastIndexOf('/')
			
			if slashPos > 0
				fileName = file.path.slice(slashPos+1)
			else
				fileName = file.path
				
			ext = mime.extension(file.t)
			
			targetPath = fsPath + fileName
			targetWebPath = webPath + fileName
			
			fs.rename(file.path, targetPath, (err) ->
				if err?
					console.log("File System Error { targetPath: '" + targetPath + "', targetWebPath: '" + targetWebPath + "', slashPos: " + slashPos + ", fileName: '" + fileName + "', file.path: '" + file.path + "' }")
					resp = new RpcResponse(null)
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				product.coverImage = targetWebPath
				
				product.save((err) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure(err, 500)
						res.json(resp, 200)
						return
					
					resp = new RpcResponse(targetWebPath)
					res.json(resp, 200)
					return
				)
			)
			
			
			
			
		)
		
	
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.token?
			true
		else
			false
module.exports = new ProductCoverRoute()<<<
Document event: offset: 2015, length: 0, timestamp: 301
text:>t<


