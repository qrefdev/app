!SESSION 2012-10-01 10:57:13.630 -----------------------------------------------
eclipse.buildId=M20120208-0800
java.version=1.7.0_05
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\SourceControl\QRef\trunk\Workspace\.metadata\.bak_0.log
Created Time: 2012-10-01 14:49:16.135

!ENTRY org.apache.log4j 4 0 2012-10-01 14:49:16.135
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 1311, length: 11, timestamp: 127
text:>console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:51:41.440
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 1766, length: 1, timestamp: 393
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 14:52:01.618
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2174, length: 1, timestamp: 449
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 14:53:22.846
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2928, length: 1, timestamp: 623
text:><



!ENTRY org.eclipse.ui 4 0 2012-10-01 14:57:58.159
!MESSAGE Unhandled event loop exception
!STACK 0
org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature)
	at org.eclipse.swt.SWT.error(SWT.java:4282)
	at org.eclipse.swt.SWT.error(SWT.java:4197)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:138)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
Caused by: java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eStructuralFeature(BasicEObjectImpl.java:739)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eObjectForURIFragmentSegment(BasicEObjectImpl.java:533)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:780)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:756)
	at org.eclipse.xtext.resource.XtextResource.access$1(XtextResource.java:1)
	at org.eclipse.xtext.resource.XtextResource$1.getEObject(XtextResource.java:104)
	at org.eclipse.xtext.resource.DefaultFragmentProvider.getEObject(DefaultFragmentProvider.java:26)
	at org.eclipse.xtext.resource.XtextResource.getEObject(XtextResource.java:289)
	at org.eclipse.xtext.linking.lazy.LazyLinkingResource.getEObject(LazyLinkingResource.java:219)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:112)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:32)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:78)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.selectAndReveal(GlobalURIEditorOpener.java:108)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.openDefaultEditor(GlobalURIEditorOpener.java:92)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.open(GlobalURIEditorOpener.java:70)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:44)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:40)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.createLinkingIssueResolutions(DefaultQuickfixProvider.java:94)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutionsForLinkingIssue(DefaultQuickfixProvider.java:88)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutions(DefaultQuickfixProvider.java:202)
	at org.eclipse.xtext.ui.editor.quickfix.AbstractIssueResolutionProviderAdapter.getResolutions(AbstractIssueResolutionProviderAdapter.java:42)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.createQuickfixes(XtextQuickAssistProcessor.java:122)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.computeQuickAssistProposals(XtextQuickAssistProcessor.java:98)
	at org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover$CompletionProposalRunnable.run(AnnotationWithQuickFixesHover.java:592)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	... 23 more

!ENTRY org.eclipse.jface.text 4 0 2012-10-01 14:57:58.219
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature)
	at org.eclipse.swt.SWT.error(SWT.java:4282)
	at org.eclipse.swt.SWT.error(SWT.java:4197)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:196)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:150)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4683)
	at org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover.getHoverInfoInternal(AnnotationWithQuickFixesHover.java:692)
	at org.eclipse.xtext.ui.editor.hover.AbstractProblemHover.getHoverInfo2(AbstractProblemHover.java:56)
	at org.eclipse.xtext.ui.editor.hover.AbstractCompositeHover.getHoverInfo2(AbstractCompositeHover.java:90)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
Caused by: java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eStructuralFeature(BasicEObjectImpl.java:739)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eObjectForURIFragmentSegment(BasicEObjectImpl.java:533)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:780)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:756)
	at org.eclipse.xtext.resource.XtextResource.access$1(XtextResource.java:1)
	at org.eclipse.xtext.resource.XtextResource$1.getEObject(XtextResource.java:104)
	at org.eclipse.xtext.resource.DefaultFragmentProvider.getEObject(DefaultFragmentProvider.java:26)
	at org.eclipse.xtext.resource.XtextResource.getEObject(XtextResource.java:289)
	at org.eclipse.xtext.linking.lazy.LazyLinkingResource.getEObject(LazyLinkingResource.java:219)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:112)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:32)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:78)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.selectAndReveal(GlobalURIEditorOpener.java:108)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.openDefaultEditor(GlobalURIEditorOpener.java:92)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.open(GlobalURIEditorOpener.java:70)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:44)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:40)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.createLinkingIssueResolutions(DefaultQuickfixProvider.java:94)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutionsForLinkingIssue(DefaultQuickfixProvider.java:88)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutions(DefaultQuickfixProvider.java:202)
	at org.eclipse.xtext.ui.editor.quickfix.AbstractIssueResolutionProviderAdapter.getResolutions(AbstractIssueResolutionProviderAdapter.java:42)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.createQuickfixes(XtextQuickAssistProcessor.java:122)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.computeQuickAssistProposals(XtextQuickAssistProcessor.java:98)
	at org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover$CompletionProposalRunnable.run(AnnotationWithQuickFixesHover.java:592)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)

!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:32.447
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6525, length: 0, timestamp: 1309
text:>
<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:32.968
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

											
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6527, length: 0, timestamp: 1310
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:33.208
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

												
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6528, length: 0, timestamp: 1311
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:33.408
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

													
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6529, length: 0, timestamp: 1312
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:33.712
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

														
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6530, length: 0, timestamp: 1313
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:33.966
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

															
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6531, length: 0, timestamp: 1314
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:34.171
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

																
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6532, length: 0, timestamp: 1315
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:34.396
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

																	
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6533, length: 0, timestamp: 1316
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:34.653
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

																		
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6534, length: 0, timestamp: 1317
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:34.906
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

																			
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6535, length: 0, timestamp: 1318
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 14:58:35.567
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
							
								attempt.save((err) ->
									if err?
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6536, length: 0, timestamp: 1319
text:>console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')<



!ENTRY org.eclipse.ui 4 0 2012-10-01 14:58:40.381
!MESSAGE Unhandled event loop exception
!STACK 0
org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature)
	at org.eclipse.swt.SWT.error(SWT.java:4282)
	at org.eclipse.swt.SWT.error(SWT.java:4197)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:138)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
Caused by: java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eStructuralFeature(BasicEObjectImpl.java:739)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eObjectForURIFragmentSegment(BasicEObjectImpl.java:533)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:780)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:756)
	at org.eclipse.xtext.resource.XtextResource.access$1(XtextResource.java:1)
	at org.eclipse.xtext.resource.XtextResource$1.getEObject(XtextResource.java:104)
	at org.eclipse.xtext.resource.DefaultFragmentProvider.getEObject(DefaultFragmentProvider.java:26)
	at org.eclipse.xtext.resource.XtextResource.getEObject(XtextResource.java:289)
	at org.eclipse.xtext.linking.lazy.LazyLinkingResource.getEObject(LazyLinkingResource.java:219)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:112)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:32)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:78)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.selectAndReveal(GlobalURIEditorOpener.java:108)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.openDefaultEditor(GlobalURIEditorOpener.java:92)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.open(GlobalURIEditorOpener.java:70)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:44)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:40)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.createLinkingIssueResolutions(DefaultQuickfixProvider.java:94)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutionsForLinkingIssue(DefaultQuickfixProvider.java:88)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutions(DefaultQuickfixProvider.java:202)
	at org.eclipse.xtext.ui.editor.quickfix.AbstractIssueResolutionProviderAdapter.getResolutions(AbstractIssueResolutionProviderAdapter.java:42)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.createQuickfixes(XtextQuickAssistProcessor.java:122)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.computeQuickAssistProposals(XtextQuickAssistProcessor.java:98)
	at org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover$CompletionProposalRunnable.run(AnnotationWithQuickFixesHover.java:592)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	... 23 more

!ENTRY org.eclipse.jface.text 4 0 2012-10-01 14:58:40.386
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature)
	at org.eclipse.swt.SWT.error(SWT.java:4282)
	at org.eclipse.swt.SWT.error(SWT.java:4197)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:196)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:150)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4683)
	at org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover.getHoverInfoInternal(AnnotationWithQuickFixesHover.java:692)
	at org.eclipse.xtext.ui.editor.hover.AbstractProblemHover.getHoverInfo2(AbstractProblemHover.java:56)
	at org.eclipse.xtext.ui.editor.hover.AbstractCompositeHover.getHoverInfo2(AbstractCompositeHover.java:90)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)
Caused by: java.lang.IllegalArgumentException: The feature 'lines' is not a valid feature
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eStructuralFeature(BasicEObjectImpl.java:739)
	at org.eclipse.emf.ecore.impl.BasicEObjectImpl.eObjectForURIFragmentSegment(BasicEObjectImpl.java:533)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:780)
	at org.eclipse.emf.ecore.resource.impl.ResourceImpl.getEObject(ResourceImpl.java:756)
	at org.eclipse.xtext.resource.XtextResource.access$1(XtextResource.java:1)
	at org.eclipse.xtext.resource.XtextResource$1.getEObject(XtextResource.java:104)
	at org.eclipse.xtext.resource.DefaultFragmentProvider.getEObject(DefaultFragmentProvider.java:26)
	at org.eclipse.xtext.resource.XtextResource.getEObject(XtextResource.java:289)
	at org.eclipse.xtext.linking.lazy.LazyLinkingResource.getEObject(LazyLinkingResource.java:219)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:112)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener$1.process(GlobalURIEditorOpener.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.readOnly(AbstractReadWriteAcces.java:32)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.readOnly(XtextDocument.java:78)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.selectAndReveal(GlobalURIEditorOpener.java:108)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.openDefaultEditor(GlobalURIEditorOpener.java:92)
	at org.eclipse.xtext.ui.editor.GlobalURIEditorOpener.open(GlobalURIEditorOpener.java:70)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:44)
	at org.eclipse.xtext.ui.editor.model.edit.IssueModificationContext.getXtextDocument(IssueModificationContext.java:40)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.createLinkingIssueResolutions(DefaultQuickfixProvider.java:94)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutionsForLinkingIssue(DefaultQuickfixProvider.java:88)
	at org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider.getResolutions(DefaultQuickfixProvider.java:202)
	at org.eclipse.xtext.ui.editor.quickfix.AbstractIssueResolutionProviderAdapter.getResolutions(AbstractIssueResolutionProviderAdapter.java:42)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.createQuickfixes(XtextQuickAssistProcessor.java:122)
	at org.eclipse.xtext.ui.editor.quickfix.XtextQuickAssistProcessor.computeQuickAssistProposals(XtextQuickAssistProcessor.java:98)
	at org.eclipse.xtext.ui.editor.hover.AnnotationWithQuickFixesHover$CompletionProposalRunnable.run(AnnotationWithQuickFixesHover.java:592)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)

!ENTRY org.apache.log4j 2 0 2012-10-01 14:59:46.369
!MESSAGE csep.parser.Lexer  - Unexpected symbol [6,005:6,006 -4 \]

!STACK 0
java.lang.Exception
	at csep.parser.Lexer.nextToken(Lexer.java:68)
	at org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:119)
	at csep.parser.FirstCommentIncludingXtextTokenStream.toString(FirstCommentIncludingXtextTokenStream.java:26)
	at org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser.parse(AbstractInternalAntlrParser.java:524)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:102)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.parse(AbstractAntlrParser.java:84)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:62)
	at org.eclipse.xtext.parser.AbstractParser.parse(AbstractParser.java:27)
	at org.eclipse.xtext.resource.XtextResource.doLoad(XtextResource.java:159)
	at org.eclipse.xtext.linking.lazy.LazyLinkingResource.doLoad(LazyLinkingResource.java:75)
	at org.eclipse.xtext.resource.XtextResource.reparse(XtextResource.java:183)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:62)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:49)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:181)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:90)
	at org.eclipse.xtext.ui.editor.reconciler.XtextDocumentReconcileStrategy.reconcile(XtextDocumentReconcileStrategy.java:44)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:254)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.apache.log4j 4 0 2012-10-01 15:01:24.260
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findById(productId)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 5771, length: 1, timestamp: 1738
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:23.642
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.)
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2275, length: 18, timestamp: 2194
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:23.862
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2275, length: 1, timestamp: 2195
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:25.778
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.
										.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2275, length: 0, timestamp: 2197
text:>
				<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:26.860
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.
									.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2281, length: 1, timestamp: 2198
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:27.053
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.
								.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2281, length: 1, timestamp: 2199
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:27.304
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.
							.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2281, length: 1, timestamp: 2200
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:27.534
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2281, length: 1, timestamp: 2201
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:32.430
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({})
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2280, length: 0, timestamp: 2207
text:>{}<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:34.991
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _})
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2282, length: 0, timestamp: 2209
text:>_<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:35.312
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _i})
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2283, length: 0, timestamp: 2210
text:>i<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:28:35.434
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id})
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2284, length: 0, timestamp: 2211
text:>d<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:32:32.372
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id: productId })
						
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2307, length: 30, timestamp: 2224
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:32:32.571
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id: productId })
					
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2306, length: 1, timestamp: 2225
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:32:32.703
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id: productId })
				
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2305, length: 1, timestamp: 2226
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:32:32.856
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id: productId })
			
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2304, length: 1, timestamp: 2227
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:32:33.025
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id: productId })
		
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2303, length: 1, timestamp: 2228
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:32:33.223
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id: productId })
	
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2302, length: 1, timestamp: 2229
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 15:32:33.431
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id: productId })

						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt.')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2301, length: 1, timestamp: 2230
text:><



!ENTRY org.apache.log4j 2 0 2012-10-01 15:41:40.389
!MESSAGE csep.parser.Lexer  - Unexpected symbol [3,445:3,446 -4 ']

!STACK 0
java.lang.Exception
	at csep.parser.Lexer.nextToken(Lexer.java:68)
	at org.antlr.runtime.CommonTokenStream.fillBuffer(CommonTokenStream.java:119)
	at csep.parser.FirstCommentIncludingXtextTokenStream.toString(FirstCommentIncludingXtextTokenStream.java:26)
	at org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser.parse(AbstractInternalAntlrParser.java:524)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:102)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.parse(AbstractAntlrParser.java:84)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:62)
	at org.eclipse.xtext.parser.antlr.AbstractAntlrParser.doParse(AbstractAntlrParser.java:70)
	at org.eclipse.xtext.parser.AbstractParser.reparse(AbstractParser.java:38)
	at org.eclipse.xtext.resource.XtextResource.update(XtextResource.java:217)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:55)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconcilerUnitOfWork.process(XtextReconcilerUnitOfWork.java:1)
	at org.eclipse.xtext.util.concurrent.IUnitOfWork$Void.exec(IUnitOfWork.java:36)
	at org.eclipse.xtext.util.concurrent.AbstractReadWriteAcces.modify(AbstractReadWriteAcces.java:49)
	at org.eclipse.xtext.ui.editor.model.XtextDocument$XtextDocumentLocker.modify(XtextDocument.java:181)
	at org.eclipse.xtext.ui.editor.model.XtextDocument.internalModify(XtextDocument.java:90)
	at org.eclipse.xtext.ui.editor.reconciler.XtextDocumentReconcileStrategy.reconcile(XtextDocumentReconcileStrategy.java:44)
	at org.eclipse.xtext.ui.editor.reconciler.XtextReconciler.run(XtextReconciler.java:254)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

!ENTRY org.apache.log4j 4 0 2012-10-01 15:45:33.500
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id: productId })
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 3047, length: 0, timestamp: 2364
text:>
					<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:45:45.542
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.find({ _id: productId })
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Not Authorized', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 3059, length: 0, timestamp: 2377
text:>''<



!ENTRY org.eclipse.jface.text 4 0 2012-10-01 15:52:41.686
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.jsdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:669)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:674)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:387)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:443)
	at org.eclipse.wst.jsdt.internal.core.CompilationUnitProblemFinder.accept(CompilationUnitProblemFinder.java:174)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.askForBinding(LookupEnvironment.java:279)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:132)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:766)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:720)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.Scope.getJavaLangString(Scope.java:1745)
	at org.eclipse.wst.jsdt.core.dom.DefaultBindingResolver.resolveExpressionType(DefaultBindingResolver.java:604)
	at org.eclipse.wst.jsdt.core.dom.Expression.resolveTypeBinding(Expression.java:111)
	at org.eclipse.wst.jsdt.internal.corext.refactoring.nls.NLSHintHelper.getAccessorClassReference(NLSHintHelper.java:97)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo(NLSStringHover.java:96)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getHoverInfo2(AbstractJavaEditorTextHover.java:95)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:147)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:78)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 15:55:47.252
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:263)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager.selectionChanged(CommonNavigatorManager.java:222)
	at org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:164)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged(Viewer.java:162)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection(StructuredViewer.java:2188)
	at org.eclipse.jface.viewers.StructuredViewer.handleSelect(StructuredViewer.java:1211)
	at org.eclipse.ui.navigator.CommonViewer.handleSelect(CommonViewer.java:478)
	at org.eclipse.jface.viewers.StructuredViewer$4.widgetSelected(StructuredViewer.java:1241)
	at org.eclipse.jface.util.OpenStrategy.fireSelectionEvent(OpenStrategy.java:239)
	at org.eclipse.jface.util.OpenStrategy.access$4(OpenStrategy.java:233)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:403)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 15:55:47.253
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 15:55:47.255
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager.selectionChanged(CommonNavigatorManager.java:222)
	at org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:164)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged(Viewer.java:162)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection(StructuredViewer.java:2188)
	at org.eclipse.jface.viewers.StructuredViewer.handleSelect(StructuredViewer.java:1211)
	at org.eclipse.ui.navigator.CommonViewer.handleSelect(CommonViewer.java:478)
	at org.eclipse.jface.viewers.StructuredViewer$4.widgetSelected(StructuredViewer.java:1241)
	at org.eclipse.jface.util.OpenStrategy.fireSelectionEvent(OpenStrategy.java:239)
	at org.eclipse.jface.util.OpenStrategy.access$4(OpenStrategy.java:233)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:403)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 15:55:47.256
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 15:55:47.257
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager.selectionChanged(CommonNavigatorManager.java:222)
	at org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:164)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged(Viewer.java:162)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection(StructuredViewer.java:2188)
	at org.eclipse.jface.viewers.StructuredViewer.handleSelect(StructuredViewer.java:1211)
	at org.eclipse.ui.navigator.CommonViewer.handleSelect(CommonViewer.java:478)
	at org.eclipse.jface.viewers.StructuredViewer$4.widgetSelected(StructuredViewer.java:1241)
	at org.eclipse.jface.util.OpenStrategy.fireSelectionEvent(OpenStrategy.java:239)
	at org.eclipse.jface.util.OpenStrategy.access$4(OpenStrategy.java:233)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:403)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 15:55:47.258
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 15:55:47.285
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.CustomAndExpression.evaluate(CustomAndExpression.java:71)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptor.isPossibleChild(NavigatorContentDescriptor.java:454)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptors(NavigatorContentDescriptorManager.java:236)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptorsForPossibleChild(NavigatorContentDescriptorManager.java:206)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findDescriptorsWithPossibleChild(NavigatorContentService.java:842)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findPossibleLabelExtensions(NavigatorContentService.java:457)
	at org.eclipse.ui.internal.navigator.NavigatorContentServiceLabelProvider.getColumnImage(NavigatorContentServiceLabelProvider.java:102)
	at org.eclipse.ui.internal.navigator.NavigatorContentServiceLabelProvider.getImage(NavigatorContentServiceLabelProvider.java:98)
	at org.eclipse.ui.internal.navigator.NavigatorDecoratingLabelProvider$StyledLabelProviderAdapter.getImage(NavigatorDecoratingLabelProvider.java:60)
	at org.eclipse.jface.viewers.DelegatingStyledCellLabelProvider.getImage(DelegatingStyledCellLabelProvider.java:184)
	at org.eclipse.jface.viewers.DecoratingStyledCellLabelProvider.getImage(DecoratingStyledCellLabelProvider.java:167)
	at org.eclipse.ui.navigator.CommonNavigatorManager.updateStatusBar(CommonNavigatorManager.java:308)
	at org.eclipse.ui.navigator.CommonNavigatorManager$1.selectionChanged(CommonNavigatorManager.java:74)
	at org.eclipse.jface.viewers.StructuredViewer$3.run(StructuredViewer.java:888)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.firePostSelectionChanged(StructuredViewer.java:886)
	at org.eclipse.jface.viewers.StructuredViewer.handlePostSelect(StructuredViewer.java:1226)
	at org.eclipse.ui.navigator.CommonViewer.handlePostSelect(CommonViewer.java:470)
	at org.eclipse.jface.viewers.StructuredViewer$5.widgetSelected(StructuredViewer.java:1251)
	at org.eclipse.jface.util.OpenStrategy.firePostSelectionEvent(OpenStrategy.java:262)
	at org.eclipse.jface.util.OpenStrategy.access$5(OpenStrategy.java:256)
	at org.eclipse.jface.util.OpenStrategy$3.run(OpenStrategy.java:433)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 15:55:47.286
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 15:55:47.288
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.CustomAndExpression.evaluate(CustomAndExpression.java:71)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptor.isPossibleChild(NavigatorContentDescriptor.java:454)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptors(NavigatorContentDescriptorManager.java:236)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptorsForPossibleChild(NavigatorContentDescriptorManager.java:206)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findDescriptorsWithPossibleChild(NavigatorContentService.java:842)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findPossibleLabelExtensions(NavigatorContentService.java:457)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findRelevantLabelProviders(NavigatorContentService.java:496)
	at org.eclipse.ui.internal.navigator.NavigatorContentServiceDescriptionProvider.getDescription(NavigatorContentServiceDescriptionProvider.java:58)
	at org.eclipse.ui.navigator.CommonNavigatorManager.updateStatusBar(CommonNavigatorManager.java:313)
	at org.eclipse.ui.navigator.CommonNavigatorManager$1.selectionChanged(CommonNavigatorManager.java:74)
	at org.eclipse.jface.viewers.StructuredViewer$3.run(StructuredViewer.java:888)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.firePostSelectionChanged(StructuredViewer.java:886)
	at org.eclipse.jface.viewers.StructuredViewer.handlePostSelect(StructuredViewer.java:1226)
	at org.eclipse.ui.navigator.CommonViewer.handlePostSelect(CommonViewer.java:470)
	at org.eclipse.jface.viewers.StructuredViewer$5.widgetSelected(StructuredViewer.java:1251)
	at org.eclipse.jface.util.OpenStrategy.firePostSelectionEvent(OpenStrategy.java:262)
	at org.eclipse.jface.util.OpenStrategy.access$5(OpenStrategy.java:256)
	at org.eclipse.jface.util.OpenStrategy$3.run(OpenStrategy.java:433)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 15:55:47.289
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 15:55:47.300
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:263)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager$3.open(CommonNavigatorManager.java:184)
	at org.eclipse.ui.OpenAndLinkWithEditorHelper$InternalListener.open(OpenAndLinkWithEditorHelper.java:48)
	at org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:866)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.java:864)
	at org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.java:1152)
	at org.eclipse.ui.navigator.CommonViewer.handleOpen(CommonViewer.java:462)
	at org.eclipse.jface.viewers.StructuredViewer$6.handleOpen(StructuredViewer.java:1256)
	at org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:275)
	at org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:269)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:309)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 15:55:47.300
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 15:55:47.302
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager$3.open(CommonNavigatorManager.java:184)
	at org.eclipse.ui.OpenAndLinkWithEditorHelper$InternalListener.open(OpenAndLinkWithEditorHelper.java:48)
	at org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:866)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.java:864)
	at org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.java:1152)
	at org.eclipse.ui.navigator.CommonViewer.handleOpen(CommonViewer.java:462)
	at org.eclipse.jface.viewers.StructuredViewer$6.handleOpen(StructuredViewer.java:1256)
	at org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:275)
	at org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:269)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:309)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 15:55:47.303
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 15:55:47.305
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager$3.open(CommonNavigatorManager.java:184)
	at org.eclipse.ui.OpenAndLinkWithEditorHelper$InternalListener.open(OpenAndLinkWithEditorHelper.java:48)
	at org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:866)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.java:864)
	at org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.java:1152)
	at org.eclipse.ui.navigator.CommonViewer.handleOpen(CommonViewer.java:462)
	at org.eclipse.jface.viewers.StructuredViewer$6.handleOpen(StructuredViewer.java:1256)
	at org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:275)
	at org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:269)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:309)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 15:55:47.305
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.apache.log4j 4 0 2012-10-01 15:56:59.358
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findO({ _id: productId })
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2279, length: 0, timestamp: 2446
text:>O<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:56:59.623
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOn({ _id: productId })
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2280, length: 0, timestamp: 2447
text:>n<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:56:59.810
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2281, length: 0, timestamp: 2448
text:>e<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:57:54.337
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
					.populate
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2308, length: 0, timestamp: 2459
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:57:54.857
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2309, length: 0, timestamp: 2460
text:>	<



!ENTRY org.apache.log4j 4 0 2012-10-01 15:57:58.443
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2320, length: 0, timestamp: 2462
text:>''<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:07:47.523
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) -> 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 1517, length: 1, timestamp: 2484
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:07:51.189
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) = 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 1907, length: 2, timestamp: 2485
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:07:51.618
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) ->
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 1908, length: 0, timestamp: 2486
text:>><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:07:56.207
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) -> 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2369, length: 2, timestamp: 2487
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:08:00.717
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) = 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 3417, length: 2, timestamp: 2489
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:08:01.094
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) -> 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 3418, length: 0, timestamp: 2490
text:>><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:08:09.024
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) = 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 5600, length: 2, timestamp: 2491
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:08:09.393
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) ->
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 5601, length: 0, timestamp: 2492
text:>><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:08:13.101
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6775, length: 2, timestamp: 2493
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:08:17.333
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 7656, length: 2, timestamp: 2495
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:10:32.569
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 255, length: 0, timestamp: 2514
text:>''<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:12:09.924
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>crypto = require('crypto')
mongoose = require('mongoose')
QRefDatabase = require('../db/QRefDatabase')
ObjectId = mongoose.Types.ObjectId
Dictionary = require('../collections/Dictionary')
async = require('')
###
Secure utility methods for managing users, credentials, and tokens.
@author Nathan Klick
@copyright QRef 2012
###
class UserAuth 
	###
	Creates a new UserAuth object instance.
	###
	constructor: () ->
	###
	Generates a random salt.
	@return [String] A hexadecimal string representing a SHA-512 hash.
	###
	salt: () -> 
		hash = crypto.createHash('sha512')
		hash.update(crypto.randomBytes(1024))
		hash.digest('hex')
	###
	Performs an HMAC transformation on a password using a given key and salt values.
	@param key [String] The key to use with the HMAC algorithm.
	@param salt [String] A hexadecimal string representing a SHA-512 salt value.
	@param password [String] The clear text password to be encoded.
	@return [String] A hexadecimal string representing a secure SHA-512 HMAC representation of the clear text password.
	###
	securePassword: (key, salt, password) ->
		sKey = key + salt
		hmac = crypto.createHmac('sha512', sKey)
		hmac.update(password)
		hmac.digest('hex')
	###
	Generates a random secure token using the given key and salt values.
	@param key [String] The key to use with the HMAC algorithm.
	@param salt [String] A hexadecimal string representing a SHA-512 salt value.
	@return [String] A hexadecimal string representing a secure random token.
	###
	secureToken: (key, salt) ->
		sPassword = '' + Date.now() + crypto.randomBytes(64)
		@.securePassword(key, salt, sPassword)
	###
	Validates a given userName and password against the database.
	@param userName [String] The username to validate.
	@param password [String] The clear text password to validate.
	@param callback [Function] A function meeting the requirements of the {Callbacks#userAuthValidateCredentialCallback} method.
	###
	validateCredential: (userName, password, callback) ->
		db = QRefDatabase.instance()
		db.User.where('userName')
				.equals(userName)
				.findOne((err, user) => 
					if err? 
						callback(err, false)
					if user?
						pwHash = @.securePassword(user._id, user.passwordSalt, password)
						callback(null, pwHash == user.passwordHash)
					else
						callback(null, false)
				)
	###
	Validate a secure token against the database records.
	@param token [String] A hexadecimal string representing a secure token.
	@param callback [Function] A function meeting the requirements of the {Callbacks#userAuthValidateCredentialCallback} method.
	###
	validateToken: (token, callback) ->
		db = QRefDatabase.instance()
		db.AuthToken.where('token')
					 .equals(token)
					 .findOne((err, obj) =>
					 	if err?
					 		callback(err, false)
					 		return
					 	if obj?
					 		callback(null, Date.now() < obj.expiresOn)
					 	else
					 		callback(null, false)
					 )
	###
	Validates a set of user credentials against the database and issues a valid token if the credentials are valid.
	@param userName [String] The username to validate.
	@param password [String] The clear text password to validate.
	@param callback [Function] A function meeting the requirements of the {Callbacks#userAuthLoginCallback} method.
	###
	login: (userName, password, callback) ->
		db = QRefDatabase.instance()
	
			
		db.User.where('userName')
				.equals(userName)
				.findOne((err, user) =>
					if err?
						callback(err, null, false)
						return
					if user?
						pwHash = @.securePassword(user._id, user.passwordSalt, password)
						
						if pwHash == user.passwordHash
							expiry = new Date()
							expiry.setHours(expiry.getHours() + 336)
							tk = new db.AuthToken()
							tk.token = @.secureToken(user._id, user.passwordSalt)
							tk.expiresOn = expiry
							tk.user = user
							tk.save((error) ->
								if error?
									callback(error, null, false)
								else
									callback(null, tk.token, true)
							) 
						else
							callback(null, null, false)
					else
						callback(null, null, false)
		)
	###
	A helper method user to extract a token from the Authorization HTTP header and pass it to the {#validateToken} method.
	@param req [Express.Request] The HTTP request object.
	@param callback [Function] A function meeting the requirements of the {Callbacks#userAuthValidateCredentialCallback} method.
	###
	validateRequest: (req, callback) ->
		@.validateToken(req.header('Authorization'), callback)
	###
	Validates and extends the life of an existing secure token.
	@param token [String] A hexadecimal string representing a secure token.
	@param callback [Function] A function meeting the requirements of the {Callbacks#userAuthValidateCredentialCallback} method.
	###
	refreshToken: (token, callback) ->
		db = QRefDatabase.instance()
		db.AuthToken.where('token')
					 .equals(token)
					 .findOne((err, obj) ->
					 	if err?
					 		callback(err, false)
					 		return
					 	if obj?
					 		if Date.now() < obj.expiresOn
					 			expiry = new Date()
					 			expiry.setHours(expiry.getHours() + 336)
					 			obj.expiresOn =  expiry
					 			obj.save((error) ->
					 				if error?
					 					callback(error, false)
					 				else
					 					callback(null, true) 
					 			)
					 		else
					 			callback(null, false)
					 	else
					 		callback(null, false)
					 )
	###
	Creates a new user account with no roles.
	@param userName [String] The userName to create. This should always be the email address of the user.
	@param password [String] The clear text password provided by the user.
	@param callback [Function] A function meeting the requirements of the {Callbacks#userAuthCreateAccountCallback} method.
	###
	createAccount: (userName, password, callback) ->
		db = QRefDatabase.instance()
		userSalt = @.salt()
		userGuid = new ObjectId()
		userHash = @.securePassword(userGuid, userSalt, password)
		
		db.Roles.where('roleName')
			.equals('Users')
			.findOne((err, role) ->
				
				if err?
					callback(err, false, 4)
					return
				
				if not role?
					callback(err, false, 5)
					return
				
				user = new db.User()
				user._id = userGuid
				user.passwordSalt = userSalt
				user.passwordHash = userHash
				user.emailAddress = userName
				user.userName = userName
				user.roles.push(role._id)
				
				db.User.where('userName')
				.equals(userName)
				.find((err, arrObjs) ->
					if err?
						callback(err, false, 1)
						return
					if arrObjs? and arrObjs.length > 0
						callback(null, false, 2)
						return
					else
						user.save((err) ->
							if err?
								callback(err, false, 3)
							else
								callback(null, true, 0)
						)
				)
			)
	###
	Retrieves the associate user account for a secure token.
	@param token [String] A hexadecimal string representing a secure token.
	@param callback [Function] A function meeting the requirements of the {Callbacks#userAuthUserFromTokenCallback} method.
	###
	userFromToken: (token, callback) ->
		db = QRefDatabase.instance()
		db.AuthToken.where('token')
				.equals(token)
				.populate('user')
				.findOne((err, tk) ->
					
					if err?
						callback(err, null)
						return
					if not tk?
						callback(true, null)
						return
					
					callback(null, tk.user)
		
				)
	###
	Determines if the currently authenticated user is in the given role.
	@param token [String] A hexadecimal string representing a secure token.
	@param roleName [String] The name of the role. 
	@param callback [Function] A function meeting the requirements of the {Callbacks#userAuthIsInRoleCallback} method.
	###
	isInRole: (token, roleName, callback) ->
		db = QRefDatabase.instance()
		db.AuthToken.where('token')
				.equals(token)
				.populate('user')
				.findOne((err, tk) -> 
					
					if err?
						callback(err, false);
						return
						
					if not tk?
						callback(null, false);	
						return
					
					db.Role.where('roleName')
						.equals(roleName)
						.findOne((err, role) ->
							if err?
								callback(err, false)
								return
							
							if not role?
								callback(null, false)
								return
							
							bFound = false
							
							async.forEach(tk.user.roles, 
								(item, cb) ->
									if item.toString() == role._id.toString()
										bFound = true
									cb(null)
								, (err) ->
									callback(null, bFound)
							)
						)
				)
	###
	Determines if the currently authenticated user is in any of the listed roles.
	@param token [String] A hexadecimal string representing a secure token.
	@param roles [Array<String>] The array of roles for which to check for membership.
	@param callback [Function] A function meeting the requirements of the {Callbacks#userAuthIsInRoleCallback} method.
	###
	isInAnyRole: (token, roles, callback) ->
		db = QRefDatabase.instance()
		db.AuthToken.where('token')
			.equals(token)
			.populate('user')
			.findOne((err, tk) -> 
				
				if err?
					callback(err, false);
					return
					
				if not tk?
					callback(null, false);	
					return
					
				arrQueryEntries = []
				
				arrQueryEntries.push({ roleName: r }) for r in roles
				
				db.Role.find({ "$or": arrQueryEntries })
						.exec((err, arrRoles) ->
							if err?
								callback(err, false)
								return
							
							if arrRoles.length == 0
								callback(null, false)
								return
							
							bFound = false
							dctRoleKeys = new Dictionary()
							
							dctRoleKeys.set(r._id.toString(), r.roleName) for r in arrRoles
							
							
							async.forEach(tk.user.roles, 
								(item, cb) ->
									if dctRoleKeys.containsKey(item.toString())
										bFound = true
									cb(null)
								, (err) ->
									callback(err, bFound)
							)
						)
			)
module.exports = new UserAuth()<<<
Document event: offset: 209, length: 0, timestamp: 19
text:>''<



!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:13:57.927
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:263)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager.selectionChanged(CommonNavigatorManager.java:222)
	at org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:164)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged(Viewer.java:162)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection(StructuredViewer.java:2188)
	at org.eclipse.jface.viewers.StructuredViewer.handleSelect(StructuredViewer.java:1211)
	at org.eclipse.ui.navigator.CommonViewer.handleSelect(CommonViewer.java:478)
	at org.eclipse.jface.viewers.StructuredViewer$4.widgetSelected(StructuredViewer.java:1241)
	at org.eclipse.jface.util.OpenStrategy.fireSelectionEvent(OpenStrategy.java:239)
	at org.eclipse.jface.util.OpenStrategy.access$4(OpenStrategy.java:233)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:403)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:13:57.928
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:13:57.930
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager.selectionChanged(CommonNavigatorManager.java:222)
	at org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:164)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged(Viewer.java:162)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection(StructuredViewer.java:2188)
	at org.eclipse.jface.viewers.StructuredViewer.handleSelect(StructuredViewer.java:1211)
	at org.eclipse.ui.navigator.CommonViewer.handleSelect(CommonViewer.java:478)
	at org.eclipse.jface.viewers.StructuredViewer$4.widgetSelected(StructuredViewer.java:1241)
	at org.eclipse.jface.util.OpenStrategy.fireSelectionEvent(OpenStrategy.java:239)
	at org.eclipse.jface.util.OpenStrategy.access$4(OpenStrategy.java:233)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:403)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:13:57.930
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:13:57.934
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager.selectionChanged(CommonNavigatorManager.java:222)
	at org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:164)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged(Viewer.java:162)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection(StructuredViewer.java:2188)
	at org.eclipse.jface.viewers.StructuredViewer.handleSelect(StructuredViewer.java:1211)
	at org.eclipse.ui.navigator.CommonViewer.handleSelect(CommonViewer.java:478)
	at org.eclipse.jface.viewers.StructuredViewer$4.widgetSelected(StructuredViewer.java:1241)
	at org.eclipse.jface.util.OpenStrategy.fireSelectionEvent(OpenStrategy.java:239)
	at org.eclipse.jface.util.OpenStrategy.access$4(OpenStrategy.java:233)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:403)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:13:57.935
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:13:57.946
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.CustomAndExpression.evaluate(CustomAndExpression.java:71)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptor.isPossibleChild(NavigatorContentDescriptor.java:454)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptors(NavigatorContentDescriptorManager.java:236)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptorsForPossibleChild(NavigatorContentDescriptorManager.java:206)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findDescriptorsWithPossibleChild(NavigatorContentService.java:842)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findPossibleLabelExtensions(NavigatorContentService.java:457)
	at org.eclipse.ui.internal.navigator.NavigatorContentServiceLabelProvider.getColumnImage(NavigatorContentServiceLabelProvider.java:102)
	at org.eclipse.ui.internal.navigator.NavigatorContentServiceLabelProvider.getImage(NavigatorContentServiceLabelProvider.java:98)
	at org.eclipse.ui.internal.navigator.NavigatorDecoratingLabelProvider$StyledLabelProviderAdapter.getImage(NavigatorDecoratingLabelProvider.java:60)
	at org.eclipse.jface.viewers.DelegatingStyledCellLabelProvider.getImage(DelegatingStyledCellLabelProvider.java:184)
	at org.eclipse.jface.viewers.DecoratingStyledCellLabelProvider.getImage(DecoratingStyledCellLabelProvider.java:167)
	at org.eclipse.ui.navigator.CommonNavigatorManager.updateStatusBar(CommonNavigatorManager.java:308)
	at org.eclipse.ui.navigator.CommonNavigatorManager$1.selectionChanged(CommonNavigatorManager.java:74)
	at org.eclipse.jface.viewers.StructuredViewer$3.run(StructuredViewer.java:888)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.firePostSelectionChanged(StructuredViewer.java:886)
	at org.eclipse.jface.viewers.StructuredViewer.handlePostSelect(StructuredViewer.java:1226)
	at org.eclipse.ui.navigator.CommonViewer.handlePostSelect(CommonViewer.java:470)
	at org.eclipse.jface.viewers.StructuredViewer$5.widgetSelected(StructuredViewer.java:1251)
	at org.eclipse.jface.util.OpenStrategy.firePostSelectionEvent(OpenStrategy.java:262)
	at org.eclipse.jface.util.OpenStrategy.access$5(OpenStrategy.java:256)
	at org.eclipse.jface.util.OpenStrategy$3.run(OpenStrategy.java:433)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:13:57.947
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:13:58.007
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.CustomAndExpression.evaluate(CustomAndExpression.java:71)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptor.isPossibleChild(NavigatorContentDescriptor.java:454)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptors(NavigatorContentDescriptorManager.java:236)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptorsForPossibleChild(NavigatorContentDescriptorManager.java:206)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findDescriptorsWithPossibleChild(NavigatorContentService.java:842)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findPossibleLabelExtensions(NavigatorContentService.java:457)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findRelevantLabelProviders(NavigatorContentService.java:496)
	at org.eclipse.ui.internal.navigator.NavigatorContentServiceDescriptionProvider.getDescription(NavigatorContentServiceDescriptionProvider.java:58)
	at org.eclipse.ui.navigator.CommonNavigatorManager.updateStatusBar(CommonNavigatorManager.java:313)
	at org.eclipse.ui.navigator.CommonNavigatorManager$1.selectionChanged(CommonNavigatorManager.java:74)
	at org.eclipse.jface.viewers.StructuredViewer$3.run(StructuredViewer.java:888)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.firePostSelectionChanged(StructuredViewer.java:886)
	at org.eclipse.jface.viewers.StructuredViewer.handlePostSelect(StructuredViewer.java:1226)
	at org.eclipse.ui.navigator.CommonViewer.handlePostSelect(CommonViewer.java:470)
	at org.eclipse.jface.viewers.StructuredViewer$5.widgetSelected(StructuredViewer.java:1251)
	at org.eclipse.jface.util.OpenStrategy.firePostSelectionEvent(OpenStrategy.java:262)
	at org.eclipse.jface.util.OpenStrategy.access$5(OpenStrategy.java:256)
	at org.eclipse.jface.util.OpenStrategy$3.run(OpenStrategy.java:433)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:13:58.008
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:13:58.045
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:263)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager$3.open(CommonNavigatorManager.java:184)
	at org.eclipse.ui.OpenAndLinkWithEditorHelper$InternalListener.open(OpenAndLinkWithEditorHelper.java:48)
	at org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:866)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.java:864)
	at org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.java:1152)
	at org.eclipse.ui.navigator.CommonViewer.handleOpen(CommonViewer.java:462)
	at org.eclipse.jface.viewers.StructuredViewer$6.handleOpen(StructuredViewer.java:1256)
	at org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:275)
	at org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:269)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:309)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:13:58.046
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:13:58.047
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager$3.open(CommonNavigatorManager.java:184)
	at org.eclipse.ui.OpenAndLinkWithEditorHelper$InternalListener.open(OpenAndLinkWithEditorHelper.java:48)
	at org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:866)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.java:864)
	at org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.java:1152)
	at org.eclipse.ui.navigator.CommonViewer.handleOpen(CommonViewer.java:462)
	at org.eclipse.jface.viewers.StructuredViewer$6.handleOpen(StructuredViewer.java:1256)
	at org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:275)
	at org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:269)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:309)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:13:58.048
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:13:58.049
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager$3.open(CommonNavigatorManager.java:184)
	at org.eclipse.ui.OpenAndLinkWithEditorHelper$InternalListener.open(OpenAndLinkWithEditorHelper.java:48)
	at org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:866)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.java:864)
	at org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.java:1152)
	at org.eclipse.ui.navigator.CommonViewer.handleOpen(CommonViewer.java:462)
	at org.eclipse.jface.viewers.StructuredViewer$6.handleOpen(StructuredViewer.java:1256)
	at org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:275)
	at org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:269)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:309)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:13:58.050
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.apache.log4j 4 0 2012-10-01 16:14:59.817
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data: receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 9946, length: 0, timestamp: 2520
text:>"<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:26:33.495
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#onsole.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err?
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 2962, length: 1, timestamp: 2550
text:>#<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:32:38.018
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) >
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 9232, length: 1, timestamp: 2578
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:32:38.295
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) =>
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 9232, length: 0, timestamp: 2579
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:32:47.049
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) =>
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) >
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 9968, length: 1, timestamp: 2580
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:32:47.252
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) =>
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) =>
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 9968, length: 0, timestamp: 2581
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:33:02.120
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) =>
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) >
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 9968, length: 1, timestamp: 2582
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:33:03.054
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) =>
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 9968, length: 0, timestamp: 2583
text:>-<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:33:09.569
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) >
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 9232, length: 1, timestamp: 2584
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:33:09.763
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) ->
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 9232, length: 0, timestamp: 2585
text:>-<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:33:22.960
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) >
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6300, length: 1, timestamp: 2586
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:33:23.241
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) ->
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) =>
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 6300, length: 0, timestamp: 2587
text:>=<



!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:33:56.560
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:263)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager.selectionChanged(CommonNavigatorManager.java:222)
	at org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:164)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged(Viewer.java:162)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection(StructuredViewer.java:2188)
	at org.eclipse.jface.viewers.StructuredViewer.handleSelect(StructuredViewer.java:1211)
	at org.eclipse.ui.navigator.CommonViewer.handleSelect(CommonViewer.java:478)
	at org.eclipse.jface.viewers.StructuredViewer$4.widgetSelected(StructuredViewer.java:1241)
	at org.eclipse.jface.util.OpenStrategy.fireSelectionEvent(OpenStrategy.java:239)
	at org.eclipse.jface.util.OpenStrategy.access$4(OpenStrategy.java:233)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:403)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:33:56.561
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:33:56.563
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager.selectionChanged(CommonNavigatorManager.java:222)
	at org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:164)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged(Viewer.java:162)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection(StructuredViewer.java:2188)
	at org.eclipse.jface.viewers.StructuredViewer.handleSelect(StructuredViewer.java:1211)
	at org.eclipse.ui.navigator.CommonViewer.handleSelect(CommonViewer.java:478)
	at org.eclipse.jface.viewers.StructuredViewer$4.widgetSelected(StructuredViewer.java:1241)
	at org.eclipse.jface.util.OpenStrategy.fireSelectionEvent(OpenStrategy.java:239)
	at org.eclipse.jface.util.OpenStrategy.access$4(OpenStrategy.java:233)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:403)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:33:56.565
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:33:56.566
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager.selectionChanged(CommonNavigatorManager.java:222)
	at org.eclipse.jface.viewers.Viewer$2.run(Viewer.java:164)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.Viewer.fireSelectionChanged(Viewer.java:162)
	at org.eclipse.jface.viewers.StructuredViewer.updateSelection(StructuredViewer.java:2188)
	at org.eclipse.jface.viewers.StructuredViewer.handleSelect(StructuredViewer.java:1211)
	at org.eclipse.ui.navigator.CommonViewer.handleSelect(CommonViewer.java:478)
	at org.eclipse.jface.viewers.StructuredViewer$4.widgetSelected(StructuredViewer.java:1241)
	at org.eclipse.jface.util.OpenStrategy.fireSelectionEvent(OpenStrategy.java:239)
	at org.eclipse.jface.util.OpenStrategy.access$4(OpenStrategy.java:233)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:403)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:33:56.567
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:33:56.586
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.CustomAndExpression.evaluate(CustomAndExpression.java:71)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptor.isPossibleChild(NavigatorContentDescriptor.java:454)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptors(NavigatorContentDescriptorManager.java:236)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptorsForPossibleChild(NavigatorContentDescriptorManager.java:206)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findDescriptorsWithPossibleChild(NavigatorContentService.java:842)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findPossibleLabelExtensions(NavigatorContentService.java:457)
	at org.eclipse.ui.internal.navigator.NavigatorContentServiceLabelProvider.getColumnImage(NavigatorContentServiceLabelProvider.java:102)
	at org.eclipse.ui.internal.navigator.NavigatorContentServiceLabelProvider.getImage(NavigatorContentServiceLabelProvider.java:98)
	at org.eclipse.ui.internal.navigator.NavigatorDecoratingLabelProvider$StyledLabelProviderAdapter.getImage(NavigatorDecoratingLabelProvider.java:60)
	at org.eclipse.jface.viewers.DelegatingStyledCellLabelProvider.getImage(DelegatingStyledCellLabelProvider.java:184)
	at org.eclipse.jface.viewers.DecoratingStyledCellLabelProvider.getImage(DecoratingStyledCellLabelProvider.java:167)
	at org.eclipse.ui.navigator.CommonNavigatorManager.updateStatusBar(CommonNavigatorManager.java:308)
	at org.eclipse.ui.navigator.CommonNavigatorManager$1.selectionChanged(CommonNavigatorManager.java:74)
	at org.eclipse.jface.viewers.StructuredViewer$3.run(StructuredViewer.java:888)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.firePostSelectionChanged(StructuredViewer.java:886)
	at org.eclipse.jface.viewers.StructuredViewer.handlePostSelect(StructuredViewer.java:1226)
	at org.eclipse.ui.navigator.CommonViewer.handlePostSelect(CommonViewer.java:470)
	at org.eclipse.jface.viewers.StructuredViewer$5.widgetSelected(StructuredViewer.java:1251)
	at org.eclipse.jface.util.OpenStrategy.firePostSelectionEvent(OpenStrategy.java:262)
	at org.eclipse.jface.util.OpenStrategy.access$5(OpenStrategy.java:256)
	at org.eclipse.jface.util.OpenStrategy$3.run(OpenStrategy.java:433)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:33:56.587
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:33:56.590
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.CustomAndExpression.evaluate(CustomAndExpression.java:71)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptor.isPossibleChild(NavigatorContentDescriptor.java:454)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptors(NavigatorContentDescriptorManager.java:236)
	at org.eclipse.ui.internal.navigator.extensions.NavigatorContentDescriptorManager.findDescriptorsForPossibleChild(NavigatorContentDescriptorManager.java:206)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findDescriptorsWithPossibleChild(NavigatorContentService.java:842)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findPossibleLabelExtensions(NavigatorContentService.java:457)
	at org.eclipse.ui.internal.navigator.NavigatorContentService.findRelevantLabelProviders(NavigatorContentService.java:496)
	at org.eclipse.ui.internal.navigator.NavigatorContentServiceDescriptionProvider.getDescription(NavigatorContentServiceDescriptionProvider.java:58)
	at org.eclipse.ui.navigator.CommonNavigatorManager.updateStatusBar(CommonNavigatorManager.java:313)
	at org.eclipse.ui.navigator.CommonNavigatorManager$1.selectionChanged(CommonNavigatorManager.java:74)
	at org.eclipse.jface.viewers.StructuredViewer$3.run(StructuredViewer.java:888)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.firePostSelectionChanged(StructuredViewer.java:886)
	at org.eclipse.jface.viewers.StructuredViewer.handlePostSelect(StructuredViewer.java:1226)
	at org.eclipse.ui.navigator.CommonViewer.handlePostSelect(CommonViewer.java:470)
	at org.eclipse.jface.viewers.StructuredViewer$5.widgetSelected(StructuredViewer.java:1251)
	at org.eclipse.jface.util.OpenStrategy.firePostSelectionEvent(OpenStrategy.java:262)
	at org.eclipse.jface.util.OpenStrategy.access$5(OpenStrategy.java:256)
	at org.eclipse.jface.util.OpenStrategy$3.run(OpenStrategy.java:433)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:33:56.591
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:33:56.620
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:263)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager$3.open(CommonNavigatorManager.java:184)
	at org.eclipse.ui.OpenAndLinkWithEditorHelper$InternalListener.open(OpenAndLinkWithEditorHelper.java:48)
	at org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:866)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.java:864)
	at org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.java:1152)
	at org.eclipse.ui.navigator.CommonViewer.handleOpen(CommonViewer.java:462)
	at org.eclipse.jface.viewers.StructuredViewer$6.handleOpen(StructuredViewer.java:1256)
	at org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:275)
	at org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:269)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:309)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:33:56.621
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:33:56.622
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager$3.open(CommonNavigatorManager.java:184)
	at org.eclipse.ui.OpenAndLinkWithEditorHelper$InternalListener.open(OpenAndLinkWithEditorHelper.java:48)
	at org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:866)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.java:864)
	at org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.java:1152)
	at org.eclipse.ui.navigator.CommonViewer.handleOpen(CommonViewer.java:462)
	at org.eclipse.jface.viewers.StructuredViewer$6.handleOpen(StructuredViewer.java:1256)
	at org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:275)
	at org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:269)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:309)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:33:56.623
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.core.resources 4 1 2012-10-01 16:33:56.624
!MESSAGE Core exception while retrieving the content description
!STACK 1
org.eclipse.core.internal.resources.ResourceException: Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.
	at org.eclipse.core.internal.resources.File.getContentDescription(File.java:269)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.testContentType(FilePropertyTester.java:108)
	at org.eclipse.core.internal.propertytester.FilePropertyTester.test(FilePropertyTester.java:60)
	at org.eclipse.core.internal.expressions.Property.test(Property.java:58)
	at org.eclipse.core.internal.expressions.TestExpression.evaluate(TestExpression.java:99)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.AndExpression.evaluate(AndExpression.java:29)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateOr(CompositeExpression.java:68)
	at org.eclipse.core.internal.expressions.OrExpression.evaluate(OrExpression.java:21)
	at org.eclipse.core.internal.expressions.CompositeExpression.evaluateAnd(CompositeExpression.java:53)
	at org.eclipse.core.internal.expressions.EnablementExpression.evaluate(EnablementExpression.java:53)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin$Evaluator.run(NavigatorPlugin.java:245)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.navigator.NavigatorPlugin.safeEvaluate(NavigatorPlugin.java:260)
	at org.eclipse.ui.internal.navigator.actions.CommonActionProviderDescriptor.isEnabledFor(CommonActionProviderDescriptor.java:235)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.addProviderIfRelevant(CommonActionDescriptorManager.java:258)
	at org.eclipse.ui.internal.navigator.actions.CommonActionDescriptorManager.findRelevantActionDescriptors(CommonActionDescriptorManager.java:235)
	at org.eclipse.ui.navigator.NavigatorActionService.fillActionBars(NavigatorActionService.java:248)
	at org.eclipse.ui.navigator.CommonNavigatorManager$3.open(CommonNavigatorManager.java:184)
	at org.eclipse.ui.OpenAndLinkWithEditorHelper$InternalListener.open(OpenAndLinkWithEditorHelper.java:48)
	at org.eclipse.jface.viewers.StructuredViewer$2.run(StructuredViewer.java:866)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.JFaceUtil$1.run(JFaceUtil.java:49)
	at org.eclipse.jface.util.SafeRunnable.run(SafeRunnable.java:175)
	at org.eclipse.jface.viewers.StructuredViewer.fireOpen(StructuredViewer.java:864)
	at org.eclipse.jface.viewers.StructuredViewer.handleOpen(StructuredViewer.java:1152)
	at org.eclipse.ui.navigator.CommonViewer.handleOpen(CommonViewer.java:462)
	at org.eclipse.jface.viewers.StructuredViewer$6.handleOpen(StructuredViewer.java:1256)
	at org.eclipse.jface.util.OpenStrategy.fireOpenEvent(OpenStrategy.java:275)
	at org.eclipse.jface.util.OpenStrategy.access$2(OpenStrategy.java:269)
	at org.eclipse.jface.util.OpenStrategy$1.handleEvent(OpenStrategy.java:309)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4165)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3754)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
!SUBENTRY 1 org.eclipse.core.resources 4 274 2012-10-01 16:33:56.625
!MESSAGE Resource is out of sync with the file system: '/QRef/NodeServer/lib/router/routes/rpc/aircraft/AuthorizeAppleAircraftProductRoute.js'.

!ENTRY org.eclipse.jface.text 4 0 2012-10-01 16:35:29.560
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.NullPointerException
	at org.eclipse.wst.jsdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:669)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.CompilationUnitScope.connectTypeHierarchy(CompilationUnitScope.java:674)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:387)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.completeTypeBindings(LookupEnvironment.java:443)
	at org.eclipse.wst.jsdt.internal.core.CompilationUnitProblemFinder.accept(CompilationUnitProblemFinder.java:174)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.askForBinding(LookupEnvironment.java:279)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:132)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.getType(LookupEnvironment.java:766)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.LookupEnvironment.getResolvedType(LookupEnvironment.java:720)
	at org.eclipse.wst.jsdt.internal.compiler.lookup.Scope.getJavaLangString(Scope.java:1745)
	at org.eclipse.wst.jsdt.core.dom.DefaultBindingResolver.resolveExpressionType(DefaultBindingResolver.java:604)
	at org.eclipse.wst.jsdt.core.dom.Expression.resolveTypeBinding(Expression.java:111)
	at org.eclipse.wst.jsdt.internal.corext.refactoring.nls.NLSHintHelper.getAccessorClassReference(NLSHintHelper.java:97)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo(NLSStringHover.java:96)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getHoverInfo2(AbstractJavaEditorTextHover.java:95)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:147)
	at org.eclipse.wst.jsdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:78)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:166)

!ENTRY org.apache.log4j 4 0 2012-10-01 16:36:02.596
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) >
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) =>
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 5029, length: 1, timestamp: 2588
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:36:02.853
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) ->
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) =>
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 5029, length: 0, timestamp: 2589
text:>=<



!ENTRY org.apache.log4j 4 0 2012-10-01 16:36:11.014
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) >
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) =>
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 3951, length: 1, timestamp: 2590
text:><



!ENTRY org.apache.log4j 4 0 2012-10-01 16:36:11.231
!MESSAGE org.eclipse.xtext.ui.editor.model.DocumentPartitioner  - Detected unexpected state in document partitioner. Please file a bug with the following information attached:
Document content after the event was applied:
>>>RpcRoute = require('../../../RpcRoute')
QRefDatabase = require('../../../../db/QRefDatabase')
RpcResponse = require('../../../../serialization/RpcResponse')
UserAuth = require('../../../../security/UserAuth')
https = require('https')
async = require('async')
###
Service route that performs authentication of Apple IAP Requests.
@example Service Methods (see {AuthorizeAppleProductRequest})
  Request Format: application/json
  Response Format: application/json
  
  POST /services/rpc/aircraft/product/authorize/apple
    @BODY - (Required) AuthorizeAppleProductRpcRequest
    
  Performs apple IAP authorization and returns the handle to the user specific checklist if successful.
@author Nathan Klick
@copyright QRef 2012
###
class AuthorizeAppleAircraftProductRoute extends RpcRoute
	constructor: () ->
		super [{ method: 'POST', path: '/product/authorize/apple' }, { method: 'GET', path: '/product/authorize/apple' }]
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new RpcResponse(null)
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		console.log('INFO: AppleRoute.post() - New request received. Going to validate the token.')
		token = req.param('token')
		productId = req.body.product
		db = QRefDatabase.instance()
		receiptData = req.body.receipt
		
		console.log('INFO: AppleRoute.post() - Body Parsed. { productId: "' + productId + '", token: "' + token + '", receiptData: "' + receiptData + '" }')
		
		UserAuth.validateToken(token, (err, isTokenValid) =>
			if err? or not isTokenValid == true
				console.log('INFO: AppleRoute.post() - Invalid token. Rejecting the request.')
				resp = new RpcResponse(null)
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			console.log('INFO: AppleRoute.post() - Token is valid. Going to get the user from the token.')
			UserAuth.userFromToken(token, (err, user) => 
				if err? or not user?
					console.log('INFO: AppleRoute.post() - Could not get the User from the token. Rejecting the request.')
					resp = new RpcResponse(null)
					resp.failure('Not Authorized', 403)
					res.json(resp, 200)
					return
					
				console.log('INFO: AppleRoute.post() - Got a valid user. Going to get the product.')
				db.Product.findOne({ _id: productId })
						.populate('aircraftChecklist')
						.exec((err, product) =>
					if err?
						console.log('INFO: AppleRoute.post() - Product lookup failed with an error. Rejecting the request.')
						console.log('INFO: AppleRoute.post() - ' + err.toString())
						resp = new RpcResponse(null)
						resp.failure('Internal Error', 500)
						res.json(resp, 200)
						return
					
					if not product?
						console.log('INFO: AppleRoute.post() - Product not found. Rejecting the request.')
						resp = new RpcResponse(null)
						resp.failure('Product Not Found', 404)
						res.json(resp, 200)
						return
						
					#console.log('INFO: AppleRoute.post() - Product is valid. Going to record an authorization attempt. { product: ' + JSON.stringify(product) + ' }')
					console.log('INFO: AppleRoute.post() - { product._id: ' + product._id.toString() + ' }')
					attempt = new db.AircraftProductAuthorizationAttempt()
					attempt.user = user._id
					attempt.product = product._id
					attempt.attemptType = 'apple'
					attempt.appleReceiptHash = receiptData
					
					attempt.save((err) => 
						
						if err?
							console.log('INFO: AppleRoute.post() - Attempt save failed due to error. Rejecting the request.')
							console.log('INFO: AppleRoute.post() - ' + err.toString())
							resp = new RpcResponse(null)
							resp.failure('Internal Error', 500)
							res.json(resp, 200)
							return
						
						console.log('INFO: AppleRoute.post() - Attempt saved initially. Going to validate the receipt with apple.')
						@.validateReceipt(token, receiptData, (err, receipt) =>
							if err?
								console.log('INFO: AppleRoute.post() - Receipt validation failed due to error. Rejecting the request.')
								console.log('INFO: AppleRoute.post() - ' + err.toString())
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
								
							if not receipt?
								console.log('INFO: AppleRoute.post() - Failed to validate the receipt with apple. Rejecting the request.')
								resp = new RpcResponse(null)
								resp.failure('Internal Error', 500)
								res.json(resp, 200)
								return
							
							console.log('INFO: AppleRoute.post() - Receipt validation response received. { status: ' + receipt.status + ' }')
							attempt.appleReceipt = receipt
								
							if receipt.status == 0 and receipt.receipt.product_id == product.appleProductIdentifier
								attempt.isReceiptValid = true
								
								console.log('INFO: AppleRoute.post() - Receipt is valid per apple\'s response. Going to update the attempt.')
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return
									
									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Going to install the UserProduct record.')
									uProduct = new db.UserProduct()
									uProduct.user = user._id
									uProduct.product = product._id
									
									uProduct.save((err) => 
										if err? and not err.code == 11000
											console.log('INFO: AppleRoute.post() - Failed to install the UserProduct record due to errors. Rejecting the request.')
											console.log('INFO: AppleRoute.post() - ' + err.toString())
											console.log('INFO: AppleRoute.post() - ' + JSON.stringify(err))
											resp = new RpcResponse(null)
											resp.failure('Internal Error', 500)
											res.json(resp, 200)
											return
											
										console.log('INFO: AppleRoute.post() - UserProduct record installed. Going to clone the checklist.')
										@.cloneChecklist(product.aircraftChecklist, user, (err, checklistId) =>
											if err?
												console.log('INFO: AppleRoute.post() - Failed to clone the checklist due to errors. Rejecting the request.')
												console.log('INFO: AppleRoute.post() - ' + err.toString())
												resp = new RpcResponse(null)
												resp.failure('Internal Error', 500)
												res.json(resp, 200)
												return
											
											console.log('INFO: AppleRoute.post() - Checklist was cloned. Going to update the attempt.')
											attempt.isComplete = true
											attempt.checklist = checklistId
											
											attempt.save((err) =>
												if err?
													console.log('INFO: AppleRoute.post() - Failed to update the attempt due to errors. Rejecting the request.')
													console.log('INFO: AppleRoute.post() - ' + err.toString())
													resp = new RpcResponse(null)
													resp.failure('Internal Error', 500)
													res.json(resp, 200)
													return	
												
												console.log('INFO: AppleRoute.post() - Attempt updated successfully. Request is complete. Returning success.')
												resp = new RpcResponse(checklistId)
												res.json(resp, 200)
												return
											)
										)
									)
									
								)
							else
								console.log('INFO: AppleRoute.post() - Receipt is invalid per apple\'s response. Going to update the attempt.')
								attempt.isReceiptValid = false
								
								attempt.save((err) =>
									if err?
										console.log('INFO: AppleRoute.post() - Failed to update the attempt record. Rejecting the request.')
										console.log('INFO: AppleRoute.post() - ' + err.toString())
										resp = new RpcResponse(null)
										resp.failure('Internal Error', 500)
										res.json(resp, 200)
										return

									console.log('INFO: AppleRoute.post() - Attempt updated successfully. Rejecting the request per apple\'s response.')										
									resp = new RpcResponse(null)
									resp.failure('Invalid Receipt', 403)
									res.json(resp, 200)
									return
								)
							
						)
					)
					
				)
			)
		)
	cloneChecklist: (oChecklist, user, callback) ->
		db = QRefDatabase.instance()
		nChecklist = new db.AircraftChecklist()
		
		nChecklist.model = oChecklist.model
		nChecklist.manufacturer = oChecklist.manufacturer
		nChecklist.index = null
		nChecklist.tailNumber = null
		nChecklist.user = user._id
		nChecklist.version = 1
		nChecklist.productIcon = oChecklist.productIcon
		nChecklist.preflight = oChecklist.preflight
		nChecklist.takeoff = oChecklist.takeoff
		nChecklist.landing = oChecklist.landing
		nChecklist.emergencies = oChecklist.emergencies
		nChecklist.isDeleted = false
		
		nChecklist.save((err) -> 
			if err?
				callback(err, null)
				return
			callback(null, nChecklist._id)
		)
	validateReceipt: (token, receiptData, callback) ->
	
		options =
			hostname: "buy.itunes.apple.com"
			port: 443
			path: "/verifyReceipt"
			method: "POST"
	
		
		async.waterfall([
			(cb) ->
				UserAuth.isInRole(token, 'Administrators', (err, isMember) ->
					if err?
						cb(err, false)
						return
					
					if isMember
						options =
							hostname: "sandbox.itunes.apple.com"
							port: 443
							path: "/verifyReceipt"
							method: "POST"
						cb(null, false)
					else
						cb(null, true)
				)
			, (shouldExecute, cb) ->
				if not shouldExecute
					cb(null)
					return
				
				options =
					hostname: "buy.itunes.apple.com"
					port: 443
					path: "/verifyReceipt"
					method: "POST"
				
				cb(null)
		], (err) ->
			
			if err?
				callback(err, null)
				return
			
			request =
				"receipt-data": receiptData
			
			requestData = JSON.stringify(request)
			
			data = ""
			
			req = https.request(options, (res) -> 
					res.setEncoding('ascii')
					
					res.on('data', (buff) ->
						data += buff
					)
					
					res.on('end', () ->
						if data? 
							response = JSON.parse(data)
							
							if not response?
								callback(new Error('Invalid JSON data received from server.'), null)
							else
								callback(null, response)
						else
							callback(new Error('No data received from the server.'), null)
					)
			)
			
			req.on('error', (err) ->
				callback(err, null)
			)
			
			req.write(requestData)
			req.end()
		)
		
		
		
			
		
	isValidRequest: (req) ->
		if req.body? and req.body?.mode? and req.body.mode == 'rpc' and req.body?.product? and req.body?.receipt?
			true
		else
			false
module.exports = new AuthorizeAppleAircraftProductRoute()<<<
Document event: offset: 3951, length: 0, timestamp: 2591
text:>=<


