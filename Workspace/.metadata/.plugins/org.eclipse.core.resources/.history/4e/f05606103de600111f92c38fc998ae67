AjaxRoute = require('../../../AjaxRoute')
AjaxResponse = require('../../../../serialization/AjaxResponse')
UserAuth = require('../../../../security/UserAuth')
QRefDatabase = require('../../../../db/QRefDatabase')
class AircraftChecklistRoute extends AjaxRoute
	constructor: () ->
		super [{ method: 'POST', path: '/checklist/:checklistId' }, { method: 'GET', path: '/checklist/:checklistId' }]
	get: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = new QRefDatabase()
		token = req.param('token')
		checklistId = req.params.checklistId
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
			
			
			query = db.AircraftChecklist.findById(checklistId) 
		
			query.exec((err, obj) ->
				if err?
					resp = new AjaxResponse()
					resp.failure('Internal Error', 500)
					res.json(resp, 200)
					return
					
				if obj?
					resp = new AjaxResponse()
					resp.addRecords([obj])
					resp.setTotal(1)
					res.json(resp, 200)
				else
					resp = new AjaxResposnse()
					resp.failure('Not Found', 404)
					res.json(resp, 200)
				
			)
		)
	post: (req, res) =>
		if not @.isValidRequest(req)
			resp = new AjaxResponse()
			resp.failure('Bad Request', 400)
			res.json(resp, 200)
			return
		
		db = new QRefDatabase()
		token = req.param('token')
		checklistId = req.params.checklistId
		
		UserAuth.validateToken(token, (err, isTokenValid) ->
			if err? or not isTokenValid == true
				resp = new AjaxResponse()
				resp.failure('Not Authorized', 403)
				res.json(resp, 200)
				return
				
			# Validate Permissions Here
			
			newObj = new db.AircraftChecklist()
	
			newObj.manufacturer = req.body.manufacturer
			newObj.model = req.body.model
			newObj.preflight = req.body.preflight
			newObj.takeoff = req.body.takeoff
			newObj.landing = req.body.landing
			newObj.emergencies = req.body.emergenices
			
			if req.body?.version?
				newObj.version = req.body.version
			else 
				newObj.version = 1
			
			if req.body?.productIcon?
				newObj.productIcon = req.body.productIcon
			
			if req.body?.coverImage?
				newObj.coverImage = req.body.coverImage
			
			newObj.save((err) ->
				if err?
					resp = new AjaxResponse()
					resp.failure(err, 500)
					res.json(resp, 200)
					return
				
				resp = new AjaxResponse()
				resp.setTotal(1)
				resp.addRecord(newObj)
				res.json(resp, 200)
			)
			
		)
		

	isValidRequest: (req) ->
		if (req.query? and req.query?.token? and req.params? and req.params?.checklistId?) or
			  (req.body? and req.body?.token? and req.params? and req.params?.checklistId? and req.body?.model? and  
			 	req.body?.manufacturer? and req.body?.preflight? and req.body?.takeoff? and
			 	req.body?.landing? and req.body?.emergencies? and
			 	req.body?.mode? and req.body.mode == 'ajax')
			true
		else
			false 
	
module.exports = new AircraftChecklistRoute()